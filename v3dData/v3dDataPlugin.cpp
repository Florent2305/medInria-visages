// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "v3dDataPlugin.h"
#include "v3dDataImage.h"
#include "v3dDataFibers.h"
#include "v3dDataFibersWriter.h"
#include "v3dDataFibersReader.h"

#include <dtkCore/dtkLog.h>

#include <itkAnalyzeImageIOFactory.h>
#include <itkGDCMImageIOFactory.h>
#include <itkVTKImageIOFactory.h>

// /////////////////////////////////////////////////////////////////
// v3dDataPluginPrivate
// /////////////////////////////////////////////////////////////////

class v3dDataPluginPrivate 
{
public:
    // Class variables go here.
};

// /////////////////////////////////////////////////////////////////
// v3dDataPlugin
// /////////////////////////////////////////////////////////////////

v3dDataPlugin::v3dDataPlugin(QObject *parent) : dtkPlugin(parent), d(new v3dDataPluginPrivate)
{

}

v3dDataPlugin::~v3dDataPlugin(void)
{
    delete d;

    d = NULL;
}

bool v3dDataPlugin::initialize(void)
{
    itk::GDCMImageIOFactory::RegisterOneFactory();
    itk::AnalyzeImageIOFactory::RegisterOneFactory();
    itk::VTKImageIOFactory::RegisterOneFactory();
    
    if(!v3dDataImage::registered())
	dtkWarning() << "Unable to register v3dDataImage type";

    if(!v3dDataFibers::registered())
	dtkWarning() << "Unable to register v3dDataFibers type";
    
    if(!v3dDataFibersWriter::registered())
	dtkWarning() << "Unable to register v3dDataFibersWriter type";

    if(!v3dDataFibersReader::registered())
	dtkWarning() << "Unable to register v3dDataFibersReader type";

    return true;
}

bool v3dDataPlugin::uninitialize(void)
{
    return true;
}

QString v3dDataPlugin::name(void) const
{
    return "v3dDataPlugin";
}

QString v3dDataPlugin::description(void) const
{
    return "v3dData";
}

QStringList v3dDataPlugin::tags(void) const
{
    return QStringList() << "v3d" << "data";
}

QStringList v3dDataPlugin::types(void) const
{
    return QStringList() << "v3dDataImage"
			 << "v3dDataFibers"
			 << "v3dDataFibersWriter"
			 << "v3dDataFibersReader";
}

Q_EXPORT_PLUGIN2(v3dDataPlugin, v3dDataPlugin)
