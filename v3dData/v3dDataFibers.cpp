// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "v3dDataFibers.h"

#include <dtkCore/dtkAbstractDataFactory.h>

#include "vtkSmartPointer.h"
#include "vtkPolyData.h"
#include "vtkPolyDataReader.h"
#include "vtkPolyDataWriter.h"
#include "vtkFiberDataSet.h"

// /////////////////////////////////////////////////////////////////
// v3dDataFibersPrivate
// /////////////////////////////////////////////////////////////////

class v3dDataFibersPrivate
{
public:
    vtkSmartPointer<vtkFiberDataSet> data;
};

// /////////////////////////////////////////////////////////////////
// v3dDataFibers
// /////////////////////////////////////////////////////////////////

v3dDataFibers::v3dDataFibers(void) : dtkAbstractData(), d(new v3dDataFibersPrivate)
{
    d->data = 0;
}

v3dDataFibers::~v3dDataFibers(void)
{
    delete d;
    d = 0;
}

bool v3dDataFibers::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataType("v3dDataFibers", createV3dDataFibers);
}

QString v3dDataFibers::description(void) const
{
    return "v3dDataFibers";
}

void v3dDataFibers::setData(void *data)
{
  if (vtkFiberDataSet *dataset = vtkFiberDataSet::SafeDownCast (static_cast<vtkObject*>(data)))
      d->data = dataset;
}

void *v3dDataFibers::data(void)
{
    return d->data;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractData *createV3dDataFibers(void)
{
    return new v3dDataFibers;
}
