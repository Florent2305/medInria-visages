// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageToItkDataImageSChar3Converter.h"
#include "itkImage3D.hh"
#include "Image3D.hh"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageSChar3ConverterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageToItkDataImageSChar3ConverterPrivate
{
    public:
        itkImage3D<char> * schar3Converter;

        dtkAbstractData * output;
};

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageSChar3Converter
// /////////////////////////////////////////////////////////////////

vistalDataImageToItkDataImageSChar3Converter::vistalDataImageToItkDataImageSChar3Converter(void) :
    dtkAbstractDataConverter(), d(new vistalDataImageToItkDataImageSChar3ConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("itkDataImageSChar3");
    d->schar3Converter = NULL;
}

vistalDataImageToItkDataImageSChar3Converter::~vistalDataImageToItkDataImageSChar3Converter(void)
{

}

bool
vistalDataImageToItkDataImageSChar3Converter::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataConverterType("vistalDataImageToItkDataImageSChar3Converter", QStringList() << "vistalDataImageSChar3", "itkDataImageSChar3", createVistalDataImageToItkDataImageSChar3Converter);
}

QString
vistalDataImageToItkDataImageSChar3Converter::description(void) const
{
    return "vistalDataImageToItkDataImageSChar3Converter";
}

QStringList
vistalDataImageToItkDataImageSChar3Converter::fromTypes(void) const
{
    return QStringList() << "vistalDataImageSChar3";
}

QString
vistalDataImageToItkDataImageSChar3Converter::toType(void) const
{
    return "itkDataImageSChar3";
}

dtkAbstractData *
vistalDataImageToItkDataImageSChar3Converter::convert(void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description() == "vistalDataImageSChar3") {
        if ( vistal::Image3D<char>* image = static_cast<vistal::Image3D<char>*>( data->data() ) ) {
            if (d->schar3Converter == NULL)
                d->schar3Converter = new itkImage3D<char> ;
            d->schar3Converter->SetImage3D(*image);
            d->output->setData(d->schar3Converter->GetOutput());
        }
    }
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *
createVistalDataImageToItkDataImageSChar3Converter(void)
{
    return new vistalDataImageToItkDataImageSChar3Converter;
}
