// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageToItkDataImageUShort3Converter.h"
#include "itkImage3D.hh"
#include "Image3D.hh"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageUShort3ConverterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageToItkDataImageUShort3ConverterPrivate
{
    public:
        itkImage3D<unsigned short> * ushort3Converter;

        dtkAbstractData * output;

};

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageUShort3Converter
// /////////////////////////////////////////////////////////////////

vistalDataImageToItkDataImageUShort3Converter::vistalDataImageToItkDataImageUShort3Converter(void) :
    dtkAbstractDataConverter(), d(new vistalDataImageToItkDataImageUShort3ConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("itkDataImageUShort3");

    d->ushort3Converter = NULL;
}

vistalDataImageToItkDataImageUShort3Converter::~vistalDataImageToItkDataImageUShort3Converter(void)
{

}

bool
vistalDataImageToItkDataImageUShort3Converter::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataConverterType("vistalDataImageToItkDataImageUShort3Converter", QStringList() << "vistalDataImageUShort3", "itkDataImageUShort3", createVistalDataImageToItkDataImageUShort3Converter);
}

QString
vistalDataImageToItkDataImageUShort3Converter::description(void) const
{
    return "vistalDataImageToItkDataImageUShort3Converter";
}

QStringList
vistalDataImageToItkDataImageUShort3Converter::fromTypes(void) const
{
    return QStringList() << "vistalDataImageUShort3";
}

QString
vistalDataImageToItkDataImageUShort3Converter::toType(void) const
{
    return "itkDataImageUShort3";
}

dtkAbstractData *
vistalDataImageToItkDataImageUShort3Converter::convert(void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description() == "vistalDataImageSShort3") {
        if ( vistal::Image3D<unsigned short>* image = static_cast<vistal::Image3D<unsigned short>*>( data->data() ) ) {
            if (d->ushort3Converter == NULL)
                d->ushort3Converter = new itkImage3D<unsigned short> ;
            d->ushort3Converter->SetImage3D(*image);
            d->output->setData(d->ushort3Converter->GetOutput());
        }
    }
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *
createVistalDataImageToItkDataImageUShort3Converter(void)
{
    return new vistalDataImageToItkDataImageUShort3Converter;
}
