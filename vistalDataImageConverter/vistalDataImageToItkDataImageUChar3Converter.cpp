// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageToItkDataImageUChar3Converter.h"
#include "itkImage3D.hh"
#include "Image3D.hh"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageUChar3ConverterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageToItkDataImageUChar3ConverterPrivate
{
    public:
        itkImage3D<unsigned char> * uchar3Converter;

        dtkAbstractData * output;
};

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageUChar3Converter
// /////////////////////////////////////////////////////////////////

vistalDataImageToItkDataImageUChar3Converter::vistalDataImageToItkDataImageUChar3Converter(void) :
    dtkAbstractDataConverter(), d(new vistalDataImageToItkDataImageUChar3ConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("itkDataImageUChar3");
    d->uchar3Converter = NULL;
}

vistalDataImageToItkDataImageUChar3Converter::~vistalDataImageToItkDataImageUChar3Converter(void)
{

}

bool
vistalDataImageToItkDataImageUChar3Converter::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataConverterType("vistalDataImageToItkDataImageUChar3Converter", QStringList() << "vistalDataImageUChar3", "itkDataImageUChar3", createVistalDataImageToItkDataImageUChar3Converter);
}

QString
vistalDataImageToItkDataImageUChar3Converter::description(void) const
{
    return "vistalDataImageToItkDataImageUChar3Converter";
}

QStringList
vistalDataImageToItkDataImageUChar3Converter::fromTypes(void) const
{
    return QStringList() << "vistalDataImageUChar3";
}

QString
vistalDataImageToItkDataImageUChar3Converter::toType(void) const
{
    return "itkDataImageUChar3";
}

dtkAbstractData *
vistalDataImageToItkDataImageUChar3Converter::convert(void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description() == "vistalDataImageUChar3") {
			vistal::Image3D<unsigned char>* image = static_cast<vistal::Image3D<unsigned char>*>( data->data() );
        if ( image != NULL ) {
            if (d->uchar3Converter == NULL)
                d->uchar3Converter = new itkImage3D<unsigned char> ;
            d->uchar3Converter->SetImage3D(*image);
            d->output->setData(d->uchar3Converter->GetOutput());
        }
    }
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *
createVistalDataImageToItkDataImageUChar3Converter(void)
{
    return new vistalDataImageToItkDataImageUChar3Converter;
}
