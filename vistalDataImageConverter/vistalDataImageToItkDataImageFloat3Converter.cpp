// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageToItkDataImageFloat3Converter.h"
#include "itkImage3D.hh"
#include "Image3D.hh"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageFloatConverterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageToItkDataImageFloat3ConverterPrivate
{
    public:
        itkImage3D<float> * float3Converter;

        dtkAbstractData * output;

};

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageFloatConverter
// /////////////////////////////////////////////////////////////////

vistalDataImageToItkDataImageFloat3Converter::vistalDataImageToItkDataImageFloat3Converter(void) :
    dtkAbstractDataConverter(), d(new vistalDataImageToItkDataImageFloat3ConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("itkDataImageFloat3");

    d->float3Converter = NULL;
}

vistalDataImageToItkDataImageFloat3Converter::~vistalDataImageToItkDataImageFloat3Converter(void)
{

}

bool
vistalDataImageToItkDataImageFloat3Converter::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataConverterType("vistalDataImageToItkDataImageFloatConverter", QStringList() << "vistalDataImageFloat3", "itkDataImageFloat3", createVistalDataImageToItkDataImageFloat3Converter);
}

QString
vistalDataImageToItkDataImageFloat3Converter::description(void) const
{
    return "vistalDataImageToItkDataImageFloat3Converter";
}

QStringList
vistalDataImageToItkDataImageFloat3Converter::fromTypes(void) const
{
    return QStringList() << "vistalDataImageFloat3";
}

QString
vistalDataImageToItkDataImageFloat3Converter::toType(void) const
{
    return "itkDataImageFloat3";
}

dtkAbstractData *
vistalDataImageToItkDataImageFloat3Converter::convert(void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description() == "vistalDataImageFloat") {
        if ( vistal::Image3D<float>* image = static_cast<vistal::Image3D<float>*>( data->data() ) ) {
            if (d->float3Converter == NULL)
                d->float3Converter = new itkImage3D<float> ;
            d->float3Converter->SetImage3D(*image);
            d->output->setData(d->float3Converter->GetOutput());
        }
    }
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *
createVistalDataImageToItkDataImageFloat3Converter(void)
{
    return new vistalDataImageToItkDataImageFloat3Converter;
}
