// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageToItkDataImageUInt3Converter.h"
#include "itkImage3D.hh"
#include "Image3D.hh"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageUInt3ConverterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageToItkDataImageUInt3ConverterPrivate
{
    public:
        itkImage3D<unsigned int> * UInt3Converter;

        dtkAbstractData * output;

};

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageUInt3Converter
// /////////////////////////////////////////////////////////////////

vistalDataImageToItkDataImageUInt3Converter::vistalDataImageToItkDataImageUInt3Converter(void) :
    dtkAbstractDataConverter(), d(new vistalDataImageToItkDataImageUInt3ConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("itkDataImageUInt3");

    d->UInt3Converter = NULL;
}

vistalDataImageToItkDataImageUInt3Converter::~vistalDataImageToItkDataImageUInt3Converter(void)
{

}

bool
vistalDataImageToItkDataImageUInt3Converter::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataConverterType("vistalDataImageToItkDataImageUInt3Converter", QStringList() << "vistalDataImageUInt3", "itkDataImageUInt3", createVistalDataImageToItkDataImageUInt3Converter);
}

QString
vistalDataImageToItkDataImageUInt3Converter::description(void) const
{
    return "vistalDataImageToItkDataImageUInt3Converter";
}

QStringList
vistalDataImageToItkDataImageUInt3Converter::fromTypes(void) const
{
    return QStringList() << "vistalDataImageUInt3";
}

QString
vistalDataImageToItkDataImageUInt3Converter::toType(void) const
{
    return "itkDataImageUInt3";
}

dtkAbstractData *
vistalDataImageToItkDataImageUInt3Converter::convert(void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description() == "vistalDataImageUInt3") {
        if ( vistal::Image3D<unsigned int>* image = static_cast<vistal::Image3D<unsigned int>*>( data->data() ) ) {
            if (d->UInt3Converter == NULL)
                d->UInt3Converter = new itkImage3D<unsigned int> ;
            d->UInt3Converter->SetImage3D(*image);
            d->output->setData(d->UInt3Converter->GetOutput());
        }
    }
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *
createVistalDataImageToItkDataImageUInt3Converter(void)
{
    return new vistalDataImageToItkDataImageUInt3Converter;
}
