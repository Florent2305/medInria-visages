// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageToItkDataImageConverter.h"
#include "itkImage3D.hh"
#include "Image3D.hh"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageConverterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageToItkDataImageConverterPrivate
{
    public:
        itkImage3D<unsigned char> * uchar3Converter;
        itkImage3D<unsigned short> * ushort3Converter;
        itkImage3D<short> * sshort3Converter;

        dtkAbstractData * output;

};

// /////////////////////////////////////////////////////////////////
// vistalDataImageToItkDataImageConverter
// /////////////////////////////////////////////////////////////////

vistalDataImageToItkDataImageConverter::vistalDataImageToItkDataImageConverter(void) :
    dtkAbstractDataConverter(), d(new vistalDataImageToItkDataImageConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("itkDataImageShort3");
    d->uchar3Converter = NULL;
    d->ushort3Converter = NULL;
    d->sshort3Converter = NULL;
}

vistalDataImageToItkDataImageConverter::~vistalDataImageToItkDataImageConverter(void)
{

}

bool
vistalDataImageToItkDataImageConverter::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataConverterType("vistalDataImageToItkDataImageConverter", QStringList() << "vistalDataImageUChar3" << "vistalDataImageUShort3"
            << "vistalDataImageSShort3", "itkDataImageShort3", createVistalDataImageToItkDataImageConverter);
}

QString
vistalDataImageToItkDataImageConverter::description(void) const
{
    return "vistalDataImageToItkDataImageConverter";
}

QStringList
vistalDataImageToItkDataImageConverter::fromTypes(void) const
{
    return QStringList() << "vistalDataImageUChar3" << "vistalDataImageUShort3" << "vistalDataImageSShort3";
}

QString
vistalDataImageToItkDataImageConverter::toType(void) const
{
    return "itkDataImageShort3";
}

dtkAbstractData *
vistalDataImageToItkDataImageConverter::convert(void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description() == "vistalDataImageUChar3") {
        if ( vistal::Image3D<unsigned char>* image = static_cast<vistal::Image3D<unsigned char>*>( data->data() ) ) {
            if (d->uchar3Converter == NULL)
                d->uchar3Converter = new itkImage3D<unsigned char> ;
            d->uchar3Converter->SetImage3D(*image);
            d->output->setData(d->uchar3Converter->GetOutput());
        }
    }
    else if (data->description() == "vistalDataImageUShort3") {
        if ( vistal::Image3D<unsigned short>* image = static_cast<vistal::Image3D<unsigned short>*>( data->data() ) ) {
            if (d->ushort3Converter == NULL)
                d->ushort3Converter = new itkImage3D<unsigned short> ;
            d->ushort3Converter->SetImage3D(*image);
            d->output->setData(d->ushort3Converter->GetOutput());
        }
    }
    else if (data->description() == "vistalDataImageSShort3") {
        if ( vistal::Image3D<short>* image = static_cast<vistal::Image3D<short>*>( data->data() ) ) {
            if (d->sshort3Converter == NULL)
                d->sshort3Converter = new itkImage3D<short> ;
            d->sshort3Converter->SetImage3D(*image);
            d->output->setData(d->sshort3Converter->GetOutput());
        }
    }
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *
createVistalDataImageToItkDataImageConverter(void)
{
    return new vistalDataImageToItkDataImageConverter;
}
