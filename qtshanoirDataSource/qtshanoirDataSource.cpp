// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "qtshanoirDataSource.h"
#include "qtshanoirDataSourceToolBox.h"

#include <medCore/medAbstractDataSourceFactory.h>
#include <medGui/medToolBox.h>

#include <QtShanoir.h>
#include <QtShanoirTreeWidget.h>
#include <QtShanoirSettingsWidget.h>


// /////////////////////////////////////////////////////////////////
// qtshanoirDataSourcePrivate
// /////////////////////////////////////////////////////////////////

class qtshanoirDataSourcePrivate
{
public:
  QtShanoirTreeWidget *mainWidget;
	QtShanoirSettingsWidget *rightWidget;  
  
  QList <medToolBox *> additional_toolboxes;
};

// /////////////////////////////////////////////////////////////////
// qtshanoirDataSource
// /////////////////////////////////////////////////////////////////

qtshanoirDataSource::qtshanoirDataSource(void) : medAbstractDataSource(), d(new qtshanoirDataSourcePrivate)
{
	d->mainWidget = NULL;
	d->rightWidget = NULL;	

  d->additional_toolboxes.clear();
  d->additional_toolboxes.push_back(new qtshanoirDataSourceToolBox);
  
  connect(d->additional_toolboxes.back(),SIGNAL(importButtonPressed()),this,SLOT(onImportData()));
  connect(d->additional_toolboxes.back(),SIGNAL(findButtonPressed()),this,SLOT(find()));
}

QWidget *qtshanoirDataSource::mainViewWidget()
{
	if (d->mainWidget)
		return d->mainWidget;
	
	initWidgets(); 
	return d->mainWidget;
}

QWidget *qtshanoirDataSource::sourceSelectorWidget()
{
	if (d->rightWidget)
		return d->rightWidget;
	
	initWidgets(); 
	return d->rightWidget;	
}

void qtshanoirDataSource::initWidgets(void)
{
	if(d->mainWidget && d->rightWidget)
	  return;
  
	if(!d->mainWidget)
    d->mainWidget = new QtShanoirTreeWidget();
	
	if(!d->rightWidget)
		d->rightWidget = new QtShanoirSettingsWidget();
	
	QtShanoir::instance()->attachTreeWidget(d->mainWidget);
	QtShanoir::instance()->initWS();     
}

qtshanoirDataSource::~qtshanoirDataSource(void)
{
	delete d;  
	d = NULL;
}

bool qtshanoirDataSource::registered(void)
{
  return medAbstractDataSourceFactory::instance()->registerDataSource("qtshanoirDataSource", createQtshanoirDataSource);
}

QString qtshanoirDataSource::description(void) const
{
  return "qtshanoirDataSource";
}

QString qtshanoirDataSource::tabName()
{
	return QString("Shanoir");
}

void qtshanoirDataSource::onImportData()
{
	QString tmpDirName = QDir::tempPath();	
	
	connect(QtShanoir::instance(),SIGNAL(downloadFinished(QString)),this,SLOT(onDownloadFinished(QString)));
	
	QtShanoir::instance()->downloadToDir(tmpDirName);
}

void qtshanoirDataSource::onDownloadFinished(QString fileName)
{
  emit dataReceived(fileName);
}

void qtshanoirDataSource::find()
{
	QtShanoir::instance()->find();  
}

QList<medToolBox*> qtshanoirDataSource::getToolboxes()
{  
  return d->additional_toolboxes;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

medAbstractDataSource *createQtshanoirDataSource(void)
{
  return new qtshanoirDataSource;
}



