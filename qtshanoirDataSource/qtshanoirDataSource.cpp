// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "qtshanoirDataSource.h"

#include <medCore/medSourceDataPluginFactory.h>
#include <medSql/medDatabaseImporter.h>
#include <QtShanoir.h>
#include <QtShanoirTreeWidget.h>
#include <QtShanoirSettingsWidget.h>


// /////////////////////////////////////////////////////////////////
// qtshanoirDataSourcePrivate
// /////////////////////////////////////////////////////////////////

class qtshanoirDataSourcePrivate
{
public:
  	QtShanoirTreeWidget *mainWidget;
	QtShanoirSettingsWidget *rightWidget;  
  
};

// /////////////////////////////////////////////////////////////////
// qtshanoirDataSource
// /////////////////////////////////////////////////////////////////

qtshanoirDataSource::qtshanoirDataSource(void) : medAbstractSourceDataPlugin(), d(new qtshanoirDataSourcePrivate)
{
	d->mainWidget = NULL;
	d->rightWidget = NULL;	
}

QWidget *qtshanoirDataSource::widget()
{
	if (d->mainWidget)
		return d->mainWidget;
	
	initWidgets(); 
	return d->mainWidget;
}

QWidget *qtshanoirDataSource::sourceSelectorWidget()
{
	if (d->rightWidget)
		return d->rightWidget;
	
	initWidgets(); 
	return d->rightWidget;	
}

void qtshanoirDataSource::initWidgets(void)
{
	if(d->mainWidget && d->rightWidget)
	  return;
  
	if(!d->mainWidget)
	  	d->mainWidget = new QtShanoirTreeWidget();
	
	if(!d->rightWidget)
		d->rightWidget = new QtShanoirSettingsWidget();
	
	QtShanoir::instance()->attachTreeWidget(d->mainWidget);
	QtShanoir::instance()->initWS();     
}

qtshanoirDataSource::~qtshanoirDataSource(void)
{
  //if(d->mainWidget)
	//	delete d->mainWidget;
  //if(d->rightWidget)
	//	delete d->rightWidget;
  
	delete d;  
	d = NULL;
}

bool qtshanoirDataSource::registered(void)
{
    return medSourceDataPluginFactory::instance()->registerSourceDataPlugin("qtshanoirDataSource", createQtshanoirDataSource);
}

QString qtshanoirDataSource::description(void) const
{
    return "qtshanoirDataSource";
}

QString qtshanoirDataSource::tabName()
{
	return QString("Shanoir");
}

void qtshanoirDataSource::onImportData()
{
	QString tmpDirName = QDir::tempPath();	
	
	connect(QtShanoir::instance(),SIGNAL(downloadFinished(QString)),this,SLOT(onDownloadFinished(QString)));
	
	QtShanoir::instance()->downloadToDir(tmpDirName);
}

void qtshanoirDataSource::onDownloadFinished(QString fileName)
{ 
  	medDatabaseImporter *importer = new medDatabaseImporter(fileName);
	connect(importer,SIGNAL(success()),this,SIGNAL(importedSuccess()));
	QThreadPool::globalInstance()->start(importer);  
}

void qtshanoirDataSource::find()
{
	QtShanoir::instance()->find();  
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

medAbstractSourceDataPlugin *createQtshanoirDataSource(void)
{
    return new qtshanoirDataSource;
}



