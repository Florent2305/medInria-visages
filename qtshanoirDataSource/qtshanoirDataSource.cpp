// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "qtshanoirDataSource.h"
#include "qtshanoirDataSourceToolBox.h"
#include "qtshanoirDataSourceProgressToolBox.h"

#include <medCore/medAbstractDataSourceFactory.h>
#include <medToolBox.h>
#include <medMetaDataKeys.h>

#include <QtShanoir.h>
#include <QtShanoirTreeWidget.h>
#include <QtShanoirSettingsWidget.h>

#include <dtkCore/dtkAbstractDataReader.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkSmartPointer.h>


// /////////////////////////////////////////////////////////////////
// qtshanoirDataSourcePrivate
// /////////////////////////////////////////////////////////////////

class qtshanoirDataSourcePrivate
{
public:
    QtShanoirTreeWidget *mainWidget;
	QtShanoirSettingsWidget *rightWidget;
    
    QString lastSuccessfulReaderDescription;
    
    QList <medToolBox *> additional_toolboxes;
};

// /////////////////////////////////////////////////////////////////
// qtshanoirDataSource
// /////////////////////////////////////////////////////////////////

qtshanoirDataSource::qtshanoirDataSource(void) : medAbstractDataSource(), d(new qtshanoirDataSourcePrivate)
{
	d->mainWidget = NULL;
	d->rightWidget = NULL;
    
    d->additional_toolboxes.clear();
    
    d->additional_toolboxes.push_back(new qtshanoirDataSourceToolBox);
    
    connect(d->additional_toolboxes.back(),SIGNAL(importButtonPressed()),this,SLOT(onImportData()));
    connect(d->additional_toolboxes.back(),SIGNAL(findButtonPressed()),this,SLOT(find()));
    
	connect(QtShanoir::instance(),SIGNAL(downloadFinished(QString,QString)),this,SLOT(onDownloadFinished(QString,QString)));
    
    d->additional_toolboxes.push_back(new qtshanoirDataSourceProgressToolBox);
}

QWidget *qtshanoirDataSource::mainViewWidget()
{
	if (d->mainWidget)
		return d->mainWidget;
	
	initWidgets(); 
	return d->mainWidget;
}

QWidget *qtshanoirDataSource::sourceSelectorWidget()
{
	if (d->rightWidget)
		return d->rightWidget;
	
	initWidgets(); 
	return d->rightWidget;	
}

void qtshanoirDataSource::initWidgets(void)
{
	if(d->mainWidget && d->rightWidget)
        return;
    
	if(!d->mainWidget)
        d->mainWidget = new QtShanoirTreeWidget();
	
	if(!d->rightWidget)
		d->rightWidget = new QtShanoirSettingsWidget();
	
	QtShanoir::instance()->attachTreeWidget(d->mainWidget);
	QtShanoir::instance()->init();     
}

qtshanoirDataSource::~qtshanoirDataSource(void)
{
    delete d->mainWidget;
    delete d->rightWidget;

    
    foreach(medToolBox *tmpToolbox, d->additional_toolboxes)
        delete tmpToolbox;
    
	delete d;
	d = NULL;
}

bool qtshanoirDataSource::registered(void)
{
    return medAbstractDataSourceFactory::instance()->registerDataSource("qtshanoirDataSource", createQtshanoirDataSource);
}

QString qtshanoirDataSource::description(void) const
{
    return "Browse Shanoir server";
}

QString qtshanoirDataSource::tabName()
{
	return QString("Shanoir");
}

void qtshanoirDataSource::onImportData()
{
	QString tmpDirName = QDir::tempPath();	
    
    QtShanoir::instance()->setDownloadMetadata(Qt::Checked);
	QtShanoir::instance()->downloadToDir(tmpDirName);
}

void qtshanoirDataSource::onDownloadFinished(QString fileName, QString xmlName)
{
    QFileInfo fileInfo(fileName);
    
    dtkSmartPointer <dtkAbstractData> dtkdata;
    
    QList<QString> readers = dtkAbstractDataFactory::instance()->readers();
    
    // cycle through readers to see if the last used reader can handle the file
    for (int i=0; i<readers.size(); i++) {
        dtkSmartPointer<dtkAbstractDataReader> dataReader;
        dataReader = dtkAbstractDataFactory::instance()->readerSmartPointer(readers[i]);
        if (dataReader->canRead( fileInfo.filePath() )) {
            if (dataReader->read( fileInfo.filePath() ))
            {
                dtkdata = dataReader->data();
                if (dtkdata)
                    break;
            }
        }
    }

    if (!dtkdata)
    {
        qWarning() << "No suitable reader found for file: " << fileInfo.filePath() << " unable to import Shanoir data!";
        emit dataReceivingFailed(fileInfo.filePath());
        return;
    }
    
    // Now populate basic data attributes
    QDomDocument xmlData;
    
    QFile fileXML(xmlName);
    fileXML.open(QFile::ReadOnly);
    
    xmlData.setContent(&fileXML);
    xmlData.appendChild(xmlData.firstChild().firstChildElement("SOAP-ENV:Body").firstChild());
    xmlData.removeChild(xmlData.firstChild());
    
    QDomNode realXMLRoot = xmlData.firstChild().firstChild();
    
    fileXML.close();
    
    QString tmpInfo = realXMLRoot.firstChildElement("study").firstChild().nodeValue();
    tmpInfo.replace(QDir::separator(),"_");
    dtkdata->addMetaData(medMetaDataKeys::StudyDescription.key(),tmpInfo);
    
    tmpInfo = realXMLRoot.firstChildElement("subject").firstChildElement("name").firstChild().nodeValue();
    tmpInfo.replace(QDir::separator(),"_");
    dtkdata->addMetaData(medMetaDataKeys::PatientName.key(),tmpInfo);
    
    tmpInfo = realXMLRoot.firstChildElement("name").firstChild().nodeValue();
    tmpInfo.replace(QDir::separator(),"_");
    dtkdata->addMetaData(medMetaDataKeys::SeriesDescription.key(),tmpInfo);
    
    tmpInfo = realXMLRoot.firstChildElement("mrDatasetAcquisition").firstChildElement("mrProtocol").firstChildElement("protocolName").firstChild().nodeValue();
    dtkdata->addMetaData(medMetaDataKeys::Protocol.key(),tmpInfo);
    
    // Fixed for now
    dtkdata->addMetaData(medMetaDataKeys::Modality.key(),"MR");
    
    tmpInfo = realXMLRoot.firstChildElement("subject").firstChildElement("birthDate").firstChild().nodeValue();
    tmpInfo.resize(10);
    dtkdata->addMetaData(medMetaDataKeys::BirthDate.key(),QDate::fromString(tmpInfo,"yyyy-MM-dd").toString());
    
    tmpInfo = realXMLRoot.firstChildElement("datasetCreationDate").firstChild().nodeValue();
    tmpInfo.resize(10);
    dtkdata->addMetaData(medMetaDataKeys::AcquisitionDate.key(),QDate::fromString(tmpInfo,"yyyy-MM-dd").toString());
    
    dtkdata->retain();
    emit dataReceived(dtkdata);
}

void qtshanoirDataSource::find()
{
	QtShanoir::instance()->find();  
}

QList<medToolBox*> qtshanoirDataSource::getToolboxes()
{  
    return d->additional_toolboxes;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

medAbstractDataSource *createQtshanoirDataSource( QWidget * )
{
    return new qtshanoirDataSource;
}



