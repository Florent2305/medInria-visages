// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef ANIMAPYRAMIDALBMREGISTRATION_H
#define ANIMAPYRAMIDALBMREGISTRATION_H

#include <itkProcessRegistration/itkProcessRegistration.h>
#include "animaPyramidalBMRegistrationPluginExport.h"

class animaPyramidalBMRegistrationPrivate;


/**
 * @brief Registration process.
 *
 * This plugin uses the registration programming interface (RPI).
 * It also implements a custom toolbox plugging itself onto the generic registration toolbox available in medInria/src/medGui.
 *
 */
class ANIMAPYRAMIDALBMREGISTRATIONPLUGIN_EXPORT animaPyramidalBMRegistration : public itkProcessRegistration
{
    Q_OBJECT
    
public:
    /**
     * @brief Constructor.
     *
     * @param void
     */
    animaPyramidalBMRegistration(void);
    
    /**
     * @brief
     *
     * @param void
     */
    virtual ~animaPyramidalBMRegistration(void);
    
    /**
     * @brief Description of the plugin.
     *
     * @param void
     * @return QString
     */
    virtual QString description(void) const;
    
    /**
     * @brief tries to register the process with the factory.
     *
     * @param void
     * @return bool true if it succeeded, false otherwise.
     */
    static bool registered(void);
    
    
    /**
     * TODO: this method is not generated by the plugin generator and I think it should be
     */
    virtual QString identifier(void) const;
    
    virtual itk::Transform<double,3,3>::Pointer getTransform();
    virtual QStringList * getTitleAndParameters();

public:
    /**
     * @brief Runs the process.
     *
     * @param ImageType the fixed image image type.
     * @return int successful or not.
     */
    virtual int update(ImageType);
    
    void emitProgress(int prog);
    
    /**
     * TODO: this method is not generated by the plugin generator and I think it should be
     */
    virtual void onCanceled (void);
    
    
    void initTransformFile(QString initTransformFile);
    
    void setBlockSize(int blockSize);

    void setBlockSpacing(unsigned int blockSpacing);
    
    void setStDevThreshold(float StDevThreshold);
    
    void setTransform(unsigned int transform);
    
    void setMetric(unsigned int metric);
    
    void setOptimizer(unsigned int optimizer);
    
    void setMaximumIterations(unsigned int MaximumIterations);
    
    void setMinimalTransformError(float MinimalTransformError);   
    
    void setOptimizerMaximumIterations(unsigned int OptimizerMaximumIterations);    
    
    void setHistogramSize(unsigned int HistogramSize);
    
    void setSearchRadius(double SearchRadius);
    
    void setSearchAngleRadius(double SearchAngleRadius);
    
    void setSearchSkewRadius(double SearchSkewRadius);
    
    void setSearchScaleRadius(double SearchScaleRadius);
    
    void setFinalRadius(double FinalRadius);
    
    void setStepSize(double StepSize);
    
    void setTranlateUpperBound(double TranlateUpperBound);
    
    void setAngleUpperBound(double AngleUpperBound);
    
    void setSkewUpperBound(double SkewUpperBound);
    
    void setScaleUpperBound(double ScaleUpperBound);
    
    void setAgregator(unsigned int agregator);
    
    void setWeightedAgregation(bool WeightedAgregation);
    
    void setBlockCenteredRotations(bool BlockCenteredRotations);
    
    void setOutputTransformType(unsigned int outputTransform);
    
    void setAgregThreshold(float AgregThreshold);
    
    void setSeStoppingThreshold(float SeStoppingThreshold);
    
    void setNumberOfPyramidLevels(unsigned int NumberOfPyramidLevels);
    
    void setLastPyramidLevel(unsigned int LastPyramidLevel);
    
    void setNumberOfThreads(int numberOfThreads);
    
    
protected :
    /**
     * @brief
     *
     * @param file The path to the file is assumed to be existing. However the file may not exist beforehand.
     * @return bool successful or not.
     */
    virtual bool writeTransform(const QString& file);
    
private:
    animaPyramidalBMRegistrationPrivate *d;
    
};

/**
 * @brief Function to instantiate the process from the factory.
 * @see registered()
 *
 * @param void
 */
dtkAbstractProcess *createAnimaPyramidalBMRegistration(void);

#endif
