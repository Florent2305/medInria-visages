// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalProcessSegmentationSTREM.h"

#include <dtkCore/dtkAbstractProcessFactory.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractData.h>

#include "mstoolsFiniteModel.h"
#include "Matrice.hh"
#include "Image3D.hh"
#include "GIS.hh"
#include "mstoolsGaussian.h"
#include "mstoolsStraInitializer.h"
#include "mstoolsHierarchicalInitializer.h"
//#include "mstoolsIO.h"


// /////////////////////////////////////////////////////////////////
// vistalProcessSegmentationSTREMPrivate
// /////////////////////////////////////////////////////////////////

class vistalProcessSegmentationSTREMPrivate
{
public:
	vistalProcessSegmentationSTREMPrivate();
	~vistalProcessSegmentationSTREMPrivate();
	// Channel 0 to 2
	std::vector< vistal::Image3D<unsigned char>* > input;
	// Channel 3
	vistal::Image3D<unsigned char>* mask;


		enum InitialisationMethod { StraInit, HierarchicalPD, HierarchicalFLAIR } initMethod;
	
	
};

vistalProcessSegmentationSTREMPrivate::vistalProcessSegmentationSTREMPrivate(): input(3)
{
	
}

vistalProcessSegmentationSTREMPrivate::~vistalProcessSegmentationSTREMPrivate()
{
	for (unsigned i = 0; i < input.size(); ++i)
		delete input[i];
	delete mask;
}


// /////////////////////////////////////////////////////////////////
// vistalProcessSegmentationSTREM
// /////////////////////////////////////////////////////////////////

vistalProcessSegmentationSTREM::vistalProcessSegmentationSTREM(void) : dtkAbstractProcess(), d(new vistalProcessSegmentationSTREMPrivate)
{
}

vistalProcessSegmentationSTREM::~vistalProcessSegmentationSTREM(void)
{
	delete d;
}

bool vistalProcessSegmentationSTREM::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("vistalProcessSegmentationSTREM", createVistalProcessSegmentationSTREM);
}

QString vistalProcessSegmentationSTREM::description(void) const
{
    return "vistalProcessSegmentationSTREM";
}

void vistalProcessSegmentationSTREM::setInput(dtkAbstractData *data, int channel)
{
	if (!data)
		return;
	if (channel >= 0 && channel < 3)
		d->input[channel] = static_cast<vistal::Image3D<unsigned char>* >(data->convert("vistalDataImageUChar3")->data());
	if (channel == 3)
		d->mask = static_cast<vistal::Image3D<unsigned char>* >(data->convert("vistalDataImageUChar3")->data());


}


void vistalProcessSegmentationSTREM::setParameter(double  data, int channel)
{
        switch(channel){

		   case(0):
				if (data == 0)
					d->initMethod = vistalProcessSegmentationSTREMPrivate::StraInit;
				else if (data == 1)
					d->initMethod = vistalProcessSegmentationSTREMPrivate::HierarchicalPD;
				else if (data == 2)
					d->initMethod = vistalProcessSegmentationSTREMPrivate::HierarchicalFLAIR;
				break;				
//                    d->alpha = data;
//                    break;
//            case(1):
//                    if(data == 0)
//                        d->tlinkMode = vistal::Tlinks::Gaussian;
//                    else if(data == 1)
//                        d->tlinkMode = vistal::Tlinks::Strem;
//                    else if(data == 2)
//                        d->tlinkMode = vistal::Tlinks::Parzen;
//                    else if(data ==3)
//                        d->tlinkMode = vistal::Tlinks::Density;
//                    else
//                        return;
//
//                    break;
//
//            case(2):
//                    d->beta = data;
//                    break;
//
//            case(3):
//                    d->useSpecGrad = data;
//                    break;
//
//            case(4):
//                    d->sigma = data;
//                    break;

            default:
                return;
        }
}

// Run the STREM Algorithm
int vistalProcessSegmentationSTREM::update(void)
{
	using namespace mstools;
	// Stra Init Part
	std::vector<vistal::Image3D<unsigned char> > input;
	for (unsigned i = 0; i < d->input.size(); ++i)
		input.push_back(*d->input[i]);
	
	FiniteModel initia;

	for(unsigned int i=0; i<3; i++)
	{		
		Distribution::Pointer p=Gaussian::New( 3);
		initia.push_back(p);
	}
	
	
	switch (d->initMethod) {
		case vistalProcessSegmentationSTREMPrivate::StraInit:
		{
			StraInitializer init(input,*d->mask);
			init.setDebugMode(false);
				if(!init. getInitialization(initia)) return -1;
			break;
		}
		case vistalProcessSegmentationSTREMPrivate::HierarchicalPD:
		{
			std::vector<std::string> seq;
			HierarchicalInitializer init(input,*d->mask,seq,false,0.01,false);
			if(!init. getInitialization(initia)) return -1;
			break;
		}
		case vistalProcessSegmentationSTREMPrivate::HierarchicalFLAIR:
		{
			std::vector<std::string> seq;
			HierarchicalInitializer init(input,*d->mask,seq,true,0.01,false);
			if(!init. getInitialization(initia)) return -1;
			break;
		}
		default:
		 return -1;
	}

	
	
  return EXIT_SUCCESS;
}

dtkAbstractData * vistalProcessSegmentationSTREM::output(void)
{
	return NULL;
      //  return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createVistalProcessSegmentationSTREM(void)
{
    return new vistalProcessSegmentationSTREM;
}
