//// /////////////////////////////////////////////////////////////////
//// Generated by medPluginGenerator
//// /////////////////////////////////////////////////////////////////

#pragma once

#include <medSegmentationAbstractToolBox.h>
#include "animaLesionsSegmentationPluginExport.h"
#include <medDataIndex.h>
#include <medDataManager.h>

class animaLesionsSegmentationToolBoxPrivate;

class ANIMALESIONSSEGMENTATIONPLUGIN_EXPORT animaLesionsSegmentationToolBox : public medSegmentationAbstractToolBox
{
    Q_OBJECT
    MED_TOOLBOX_INTERFACE("Lesions Segmentation",
                          "Automatic and Manual Lesions Segmentation",
                           << "segmentation")

public:
    animaLesionsSegmentationToolBox(QWidget *parent = 0);
    ~animaLesionsSegmentationToolBox(void);

    medAbstractData *processOutput();
    dtkPlugin* plugin();

    static bool registered(void);

    // Define get for process
    bool getEnableAuto();
    bool getEnableManu();
    unsigned int getNumberOfThreads();
    unsigned int getInitMethod();
    //double getRejRatioHierar();
    unsigned int getEmAlgo();
    int getEmIter();
    double getMinDistance();
    double getRejRatio();
    int getEmIter_concentration();
    bool getEm_before_concentration();
    bool getUseStrem();
    double getMaha();
    double getFuzzyRuleMin();
    double getFuzzyRuleMax();
    //void getUseT2();
    //void getUseDP();
    //void getUseFLAIR();
    bool getUseSpecGrad();
    //int getTLinkMode(int TLinkMode);
    float getMultiVarSources();
    float getMultiVarSinks();
    float getSigma();
    float getAlpha();
    float getMinLesionSize();
    float getMinGMSize();
    bool getRemoveBorder();
    bool getIntensityRule();
    double getIntensityT2();
    double getIntensityDP();
    double getIntensityFLAIR();
    bool getUseFormerSegModel();
    //QString getMatrixGrad();
    //QString getReadSolutionFile();
    

signals:
    void runRequest(void);

public slots:
    void onClearImagesClicked();

    void ChangeAutomaticState(int);
    void ChangeManuState(int);
    void CheckedStrem(bool);
    void CheckedFuzzy(bool);

    void updateAtlasButton(int);
    void updateRejectionFeatures(int);
    void ChangedIntensityState(int);

    void onMaskDropped(const medDataIndex& index);
    void onT1Dropped(const medDataIndex& index);
    void onT2Dropped(const medDataIndex& index);
    void onDPDropped(const medDataIndex& index);
    void onFLAIRDropped(const medDataIndex& index);
    void onT1GdDropped(const medDataIndex& index);

    medAbstractData* getT1();
    medAbstractData* getT2();
    medAbstractData* getDP();
    medAbstractData* getFLAIR();
    medAbstractData* getT1Gd();
    medAbstractData* getMask();
    medAbstractData* getAtlasCSF();
    medAbstractData* getAtlasGM();
    medAbstractData* getAtlasWM();
    medAbstractData* getSources();
    medAbstractData* getSinks();

private:
    animaLesionsSegmentationToolBoxPrivate *d;
};
