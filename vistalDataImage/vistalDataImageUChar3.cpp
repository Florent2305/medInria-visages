// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "Image3D.hh"
#include "vistalDataImageUChar3.h"
#include "itkImage3D.hh"

#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageUChar3Private
// /////////////////////////////////////////////////////////////////

class vistalDataImageUChar3Private
{
    public:
        vistal::Image3D<unsigned char> * image;
        itkImage3D<unsigned char> * itkConverter;
};

// /////////////////////////////////////////////////////////////////
// vistalDataImageUChar3
// /////////////////////////////////////////////////////////////////

vistalDataImageUChar3::vistalDataImageUChar3(void) :
    dtkAbstractDataImage(), d(new vistalDataImageUChar3Private)
{
    d->image = 0;
    d->itkConverter = 0;
}

vistalDataImageUChar3::~vistalDataImageUChar3(void)
{

}

bool
vistalDataImageUChar3::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataType("vistalDataImageUChar3", createVistalDataImageUChar3);
}

QString
vistalDataImageUChar3::description(void) const
{
    return "vistalDataImageUChar3";
}

void *
vistalDataImageUChar3::data()
{
    return d->image;
}

void *
vistalDataImageUChar3::output()
{
    if (!d->itkConverter)
        d->itkConverter = new itkImage3D<unsigned char> ;

    if (!d->image)
        return 0;

    d->itkConverter->SetImage3D(*d->image);

    return d->itkConverter->GetOutput();
}

void
vistalDataImageUChar3::setData(void* data)
{
    d->image = static_cast<vistal::Image3D<unsigned char> *> (data);
}

int
vistalDataImageUChar3::xDimension(void)
{
    if (d->image != NULL)
        return d->image->nbx;
    else
        return -1;
}

int
vistalDataImageUChar3::yDimension(void)
{
    if (d->image != NULL)
        return d->image->nby;
    else
        return -1;
}

int
vistalDataImageUChar3::zDimension(void)
{
    if (d->image != NULL)
        return d->image->nbz;
    else
        return -1;
}

int
vistalDataImageUChar3::tDimension(void)
{
    if (d->image != NULL)
        return d->image->nbt;
    else
        return -1;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractData *
createVistalDataImageUChar3(void)
{
    return new vistalDataImageUChar3;
}
