// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "bvProcessBrainSegmentation.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractProcessFactory.h>

// /////////////////////////////////////////////////////////////////
// bvProcessBrainSegmentationPrivate
// /////////////////////////////////////////////////////////////////

class bvProcessBrainSegmentationPrivate
{
    public:
        dtkAbstractData * input;
        dtkAbstractData * output;
        QSettings * settings;
};

// /////////////////////////////////////////////////////////////////
// bvProcessBrainSegmentation
// /////////////////////////////////////////////////////////////////

bvProcessBrainSegmentation::bvProcessBrainSegmentation(void) :
    dtkAbstractProcess(), d(new bvProcessBrainSegmentationPrivate)
{
    d->input = 0;
    d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageUChar3");
//    d->settings = QSettings("inria", "medInria");
//    d->settings->beginGroup("bvBrainSegmentation");
//    d->settings->setValue("biasCorrectionCmd","");
//    d->settings->setValue("histoAnalysisCmd","");
//    d->settings->setValue("getBrainCmd","");
//    d->settings->endGroup();
}

bvProcessBrainSegmentation::~bvProcessBrainSegmentation(void)
{

}

bool
bvProcessBrainSegmentation::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("bvProcessBrainSegmentation", createBvProcessBrainSegmentation);
}

QString
bvProcessBrainSegmentation::description(void) const
{
    return "bvProcessBrainSegmentation";
}

void
bvProcessBrainSegmentation::setInput(dtkAbstractData * data)
{
    d->input = data;
}

int
bvProcessBrainSegmentation::update()
{
    if (d->input == NULL)
        return -1;

    QString tmpFileName = QDir::tempPath() + QDir::separator() + "toto.dim";
    QString tmpFileNameNoExt = QFileInfo(tmpFileName).absolutePath() + QDir::separator() + QFileInfo(tmpFileName).baseName();

    if (!d->input->write(tmpFileName))
        return -1;

    QString vistalIOCmd = "/home/aabadie/Softs/builds/vistal-tools/bin/IO";
    QString bvBiasCorrectionCmd = "/home/aabadie/Softs/builds/brainvisa/bin/VipT1BiasCorrection";
    QString bvHistoAnalysisCmd = "/home/aabadie/Softs/builds/brainvisa/bin/VipHistoAnalysis";
    QString bvGetBrainCmd = "/home/aabadie/Softs/builds/brainvisa/bin/VipGetBrain";

    QProcess process;
    QStringList parameters;
    parameters << "-i" << tmpFileNameNoExt;
    parameters << "-o" << tmpFileNameNoExt + "U8";
    parameters << "-t" << "U8";

    process.start(vistalIOCmd, parameters);
    process.waitForFinished();

    parameters.clear();
    parameters << "-Fwrite" << "no";
    parameters << "-Wwrite" << "no";
    parameters << "-m" << "g";
    parameters << "-Kregul" << "40";
    parameters << "-sampling" << "16.0";
    parameters << "-Grid" << "2";
    parameters << "-ZregulTuning" << "0.5";
    parameters << "-vp" << "75";
    parameters << "-e" << "n";
    parameters << "-eWrite" << "no";
    parameters << "-vWrite" << "no";
    parameters << "-mWrite" << "no";
    parameters << "-hWrite" << "no";
    parameters << "-Last" << "0";
    parameters << "-i" << tmpFileNameNoExt + "U8.ima";
    parameters << "-o" << tmpFileNameNoExt + "U8NoBias.ima";

    process.start(bvBiasCorrectionCmd, parameters);
    process.waitForFinished(150000);

    parameters.clear();
    parameters << "-S" << "y";
    parameters << "-mode" << "a";
    parameters << "-i" << tmpFileNameNoExt + "U8NoBias.ima";
    parameters << "-o" << tmpFileNameNoExt + "Histo";

    process.start(bvHistoAnalysisCmd, parameters);
    process.waitForFinished(150000);

    parameters.clear();
    parameters << "-mode" << "S";
    parameters << "-c" << "g";
    parameters << "-i" << tmpFileNameNoExt + "U8NoBias.ima";
    parameters << "-hname" << tmpFileNameNoExt + "Histo";
    parameters << "-bname" << tmpFileNameNoExt + "BRAIN.ima";

    process.start(bvGetBrainCmd, parameters);
    process.waitForFinished(150000);

    parameters.clear();

    QFile dimFile(tmpFileNameNoExt + "BRAIN.dim");
    if (dimFile.exists()) {
        if (dimFile.open(QIODevice::ReadWrite | QIODevice::Append)) {
            QTextStream s(&dimFile);
            s << "-or RALPFH" << endl;
            dimFile.close();
        }
    }

    parameters << "-i" << tmpFileNameNoExt + "BRAIN";
    parameters << "-o" << tmpFileNameNoExt + "BRAINU8";
    parameters << "-t" << "U8";

    process.start(vistalIOCmd, parameters);
    process.waitForFinished();

    if (d->output == NULL)
        return -1;

    d->output->read(tmpFileNameNoExt + "BRAINU8.dim");
}

dtkAbstractData *
bvProcessBrainSegmentation::output(void)
{
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *
createBvProcessBrainSegmentation(void)
{
    return new bvProcessBrainSegmentation;
}
