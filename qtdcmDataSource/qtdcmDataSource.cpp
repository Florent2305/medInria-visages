// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "qtdcmDataSource.h"

#include <medSql/medDatabaseImporter.h>
#include <medSql/medDatabaseController.h>
#include <medCore/medJobManager.h>
#include <medCore/medAbstractDataSourceFactory.h>
#include <medToolBox.h>

#include <QtDcm.h>
#include <QtDcmLocalDicomSettingsWidget.h>
#include <QtDcmServersDicomSettingsWidget.h>
#include <QtDcmManager.h>
#include <QtDcmPreferences.h>

#include <dtkCore/dtkAbstractDataReader.h>
#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractData.h>

#include <qtdcmDataSourcePreviewToolBox.h>
#include <qtdcmDataSourceImportToolBox.h>
#include <qtdcmDataSourceSerieInfoToolBox.h>
#include <qtdcmDataSourceServersSettingsToolBox.h>

// /////////////////////////////////////////////////////////////////
// qtdcmDataSourcePrivate
// /////////////////////////////////////////////////////////////////

class qtdcmDataSourcePrivate
{
public:
    QtDcm * mainWidget;
    QWidget * rightWidget;
    QtDcmLocalDicomSettingsWidget * localDicomSettingsWidget;
    QtDcmServersDicomSettingsWidget * serversDicomSettingsWidget;
    qtdcmDataSourcePreviewToolBox * previewToolBox;
    qtdcmDataSourceImportToolBox * importToolBox;
    qtdcmDataSourceSerieInfoToolBox * serieInfoToolBox;
    qtdcmDataSourceServersSettingsToolBox * serversSettingsToolBox;

    QList <medToolBox *> additional_toolboxes;

    ~qtdcmDataSourcePrivate();
};

qtdcmDataSourcePrivate::~qtdcmDataSourcePrivate()
{
    delete mainWidget;
    delete rightWidget;
}

// /////////////////////////////////////////////////////////////////
// qtdcmDataSource
// /////////////////////////////////////////////////////////////////

qtdcmDataSource::qtdcmDataSource ( void ) : medAbstractDataSource(), d ( new qtdcmDataSourcePrivate )
{
    d->mainWidget = NULL;
    d->rightWidget = NULL;

    // Create gui for the right Widget;
    d->localDicomSettingsWidget = new QtDcmLocalDicomSettingsWidget;

    QPushButton * localSettingsButton = new QPushButton ( this );
    localSettingsButton->setText ( "Save settings" );
    localSettingsButton->setFocusPolicy ( Qt::NoFocus );
    localSettingsButton->setMaximumWidth ( 100 );
    QObject::connect ( localSettingsButton, SIGNAL ( clicked() ), this, SLOT ( onSaveLocalSettings() ) );

    QHBoxLayout * buttonLayout = new QHBoxLayout;
    buttonLayout->addStretch();
    buttonLayout->addWidget(localSettingsButton);
    buttonLayout->addStretch();

    QVBoxLayout * layout = new QVBoxLayout;
    layout->addWidget ( d->localDicomSettingsWidget );
    layout->addLayout(buttonLayout);
    layout->addStretch();

    d->rightWidget = new QWidget ( this );
    d->rightWidget->setLayout ( layout );

    d->previewToolBox = new qtdcmDataSourcePreviewToolBox;
    d->importToolBox = new qtdcmDataSourceImportToolBox;
    d->serieInfoToolBox = new qtdcmDataSourceSerieInfoToolBox;
    d->serversSettingsToolBox = new qtdcmDataSourceServersSettingsToolBox;

    d->additional_toolboxes.clear();
    d->additional_toolboxes.push_back ( d->serversSettingsToolBox );
    d->additional_toolboxes.push_back ( d->previewToolBox );
    d->additional_toolboxes.push_back ( d->serieInfoToolBox );
    d->additional_toolboxes.push_back ( d->importToolBox );
}

qtdcmDataSource::~qtdcmDataSource ( void )
{
    delete d;
    d = NULL;
}

bool qtdcmDataSource::registered ( void )
{
    return medAbstractDataSourceFactory::instance()->registerDataSource ( "qtdcmDataSource", createQtdcmDataSource );
}

QString qtdcmDataSource::description ( void ) const
{
    return "qtdcmDataSource";
}

QWidget *qtdcmDataSource::mainViewWidget()
{
    if ( d->mainWidget )
        return d->mainWidget;

    initWidgets();
    return d->mainWidget;
}

QWidget *qtdcmDataSource::sourceSelectorWidget()
{
    if ( d->rightWidget )
        return d->rightWidget;

    initWidgets();
    return d->rightWidget;
}

QString qtdcmDataSource::tabName()
{
    return QString ( "Dicom" );
}

QList<medToolBox*> qtdcmDataSource::getToolboxes()
{
    return d->additional_toolboxes;
}

void qtdcmDataSource::initWidgets ( void )
{
    if ( d->mainWidget && d->rightWidget )
        return;

    if ( !d->mainWidget )
    {
        d->mainWidget = new QtDcm();
        d->mainWidget->getManager()->setPreviewWidget ( d->previewToolBox->getPreviewWidget() );
        d->mainWidget->getManager()->setImportWidget ( d->importToolBox->getImportWidget() );
        d->mainWidget->getManager()->setSerieInfoWidget ( d->serieInfoToolBox->getSerieInfoWidget() );
        d->mainWidget->getManager()->useConverter ( false );
        QObject::connect ( d->mainWidget->getManager(), SIGNAL ( serieMoved ( QString ) ), this, SLOT ( onSerieMoved ( QString ) ) );

        d->localDicomSettingsWidget->setPreferences ( d->mainWidget->getManager()->getPreferences() );
        d->serversSettingsToolBox->getServersDicomSettingsWidget()->setPreferences(d->mainWidget->getManager()->getPreferences());

//         if ( !d->rightWidget )
//         {
//             d->rightWidget = new QtDcmLocalDicomSettingsWidget();
//             d->rightWidget->treeWidget->setStyleSheet ( "alternate-background-color: #505050;\
//                                                       border-top-width: 0px;\
//                                                       border-left-width: 0px;\
//                                                       border-right-width: 0px;\
//                                                       border-bottom-width: 0px;\
//                                                       padding-top: 0px;\
//                                                       padding-left: 0px;\
//                                                       padding-right: 0px;\
//                                                       padding-bottom: 0px;\
//                                                       font-size: 10px;\
//                                                       color: #b2b8b2;\
//                                                       background: #313131;" );
//             d->rightWidget->setPreferences ( d->mainWidget->getManager()->getPreferences() );
//         }
    }
}

void qtdcmDataSource::onSerieMoved ( QString directory )
{
    emit dataToImportReceived ( directory );
}

void qtdcmDataSource::onSaveLocalSettings()
{
    if ( d->localDicomSettingsWidget )
        d->localDicomSettingsWidget->updatePreferences();
}


// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

medAbstractDataSource *createQtdcmDataSource ( void )
{
    return new qtdcmDataSource;
}
