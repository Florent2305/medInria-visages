// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageReader.h"

#include <dtkCore/dtkAbstractDataFactory.h>

#include <dtkCore/dtkAbstractData.h>

#include <vistalIO.h>


// /////////////////////////////////////////////////////////////////
// vistalDataImageReaderPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageReaderPrivate
{
public:
};

// /////////////////////////////////////////////////////////////////
// vistalDataImageReader
// /////////////////////////////////////////////////////////////////

vistalDataImageReader::vistalDataImageReader(void) : dtkAbstractDataReader(), d(new vistalDataImageReaderPrivate)
{

}

vistalDataImageReader::~vistalDataImageReader(void)
{

}

bool vistalDataImageReader::registered(void)
{
    return dtkAbstractDataFactory::instance()->registerDataReaderType("vistalDataImageReader", QStringList() << "vistalDataImageUChar3" << "vistalDataImageUShort3" << "vistalDataImageSShort3", createVistalDataImageReader);
}

QString vistalDataImageReader::description(void) const
{
    return "vistalDataImageReader";
}

QStringList vistalDataImageReader::handled(void) const
{
  return QStringList() << "vistalDataImageUChar3" << "vistalDataImageUShort3" << "vistalDataImageSShort3";
}


bool vistalDataImageReader::canRead (QString path)
{
  /*if (!this->io.IsNull())
    return this->io->CanReadFile ( path.toAscii().constData() );
  return false;*/
  
  return true; // QFile(path).isReadable();  
}

bool vistalDataImageReader::canRead (QStringList paths)
{
 
   if (!paths.count())
   return false;
   return this->canRead ( paths[0].toAscii().constData() );
 

}

void vistalDataImageReader::readInformation (QString path)
{
  
  dtkAbstractData *data = this->data();
  if(!data)
  {
    
    if ("U8" == vistal::getImageType(path))
          data = dtkAbstractDataFactory::instance()->create("vistalDataImageUChar3");
    
    if ("S16" == vistal::getImageType(path))
          data = dtkAbstractDataFactory::instance()->create("vistalDataImageSShort3");
    
    if ("U16" == vistal::getImageType(path))
          data = dtkAbstractDataFactory::instance()->create("vistalDataImageUShort3");
    
       
    if(data) 
      this->setData(data);
        
  }
  
  if(data)
  {
    data->addMetaData("FilePath", QStringList()<< path);
    
  }
       
}




void vistalDataImageReader::readInformation (QStringList paths)
{
  if (!paths.count())
    return;
  this->readInformation ( paths[0].toAscii().constData() );
}

bool vistalDataImageReader::read (QString path)
{
  
  this->setProgress (0);
	
  this->readInformation ( path );

  this->setProgress (50);
	
  qDebug() << "Can read with: " << this->description();
  /*	
	itk::DataImageReaderCommand::Pointer command = itk::DataImageReaderCommand::New();
	command->SetDCMTKDataImageReader ( this );
	this->io->AddObserver ( itk::ProgressEvent(), command);
  */	
	
  if (dtkAbstractData *dtkdata = this->data() ) {
		
    if (dtkdata->description()=="vistalDataImageUChar3") 
    {
      
      std::string file = path.toAscii().data();
      vistal::Image3D<unsigned char> *image = new vistal::Image3D<unsigned char>;
      vistal::io::readImage(file, *image);
      dtkdata->setData(image);
           
    }
    else if (dtkdata->description()=="vistalDataImageSShort3") 
    {
      
      std::string file = path.toAscii().data();
      vistal::Image3D<short> *image = new vistal::Image3D<short>;
      vistal::io::readImage(file, *image);
      dtkdata->setData(image);
           
    }
    else if (dtkdata->description()=="vistalDataImageUShort3") 
    {
      
      std::string file = path.toAscii().data();
      vistal::Image3D<unsigned short> *image = new vistal::Image3D<unsigned short>;
      vistal::io::readImage(file, *image);
      dtkdata->setData(image);
           
    }
        
   
    else {
      qWarning() << "Unrecognized pixel type";
      return false;
    }
		
  }

  this->setProgress (100);

  //this->io->RemoveAllObservers ();
	
  return true;
	
}

bool vistalDataImageReader::read (QStringList paths)
{
  if (!paths.count())
    return false;
  return this->read ( paths[0].toAscii().constData() );
}

void vistalDataImageReader::setProgress (int value)
{
  emit progressed (value);
}




// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataReader *createVistalDataImageReader(void)
{
    return new vistalDataImageReader;
}



