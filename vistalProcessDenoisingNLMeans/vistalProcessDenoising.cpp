// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalProcessDenoising.h"

#include <dtkCore/dtkAbstractProcessFactory.h>
#include <dtkCore/dtkAbstractDataFactory.h>

#include "NLMeans_class.hh"
#include <cstdlib>

// /////////////////////////////////////////////////////////////////
// vistalProcessDenoisingPrivate
// /////////////////////////////////////////////////////////////////

class vistalProcessDenoisingPrivate
{
public:
        dtkAbstractData *input;	
        dtkAbstractData *output;

        double seuil;
        double beta;
        int seuil_adapt;
        int isotropic;
        double S;
        double M;
        int testmean;
        int testvar;
        double m_min;
        double v_min;
        int weight_method;
        int block;
        int b_space;
	unsigned int N_thread;
        //char* temp;
	
        // TO DO : temp directory for slice preview
};

// /////////////////////////////////////////////////////////////////
// vistalProcessDenoising
// /////////////////////////////////////////////////////////////////

vistalProcessDenoising::vistalProcessDenoising(void) : dtkAbstractProcess(), d(new vistalProcessDenoisingPrivate)
{
	d->input = NULL;
	d->output = NULL;  
        d->seuil = 0;
        d->beta = 1;
        d->seuil_adapt = 0;
        d->isotropic = 0;
        d->S = 1;
        d->M = 5;
        d->testmean = 1;
        d->testvar = 1;
        d->m_min = 0.95;
        d->v_min = 0.5;
        d->weight_method = 0;
        d->block = 1;
        d->b_space = 2;
	d->N_thread = 1;
        //temp = NULL;
}

vistalProcessDenoising::~vistalProcessDenoising(void)
{                
        delete d->input;
	d->input = NULL;
	
        delete d->output;
	d->output = NULL;	
}

bool vistalProcessDenoising::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("vistalProcessDenoisingNLMEANS", createVistalProcessDenoising);
}

QString vistalProcessDenoising::description(void) const
{  
    return "vistalProcessDenoisingNLMEANS";
}

void vistalProcessDenoising::setInput(dtkAbstractData *data)
{    
    if (!data)  
    {
        return;
    }
    
    else if (data->description() == "itkDataImageChar3")
    {
        data->addConverter("itkDataImageToVistalDataImageChar3Converter");
        data->enableConverter("itkDataImageToVistalDataImageChar3Converter");
        d->input = data->convert("vistalDataImageChar3");	

	if (!d->input)
	  return;  
    }   
 
    else if (data->description() == "itkDataImageUChar3")
    {
        data->addConverter("itkDataImageToVistalDataImageUChar3Converter");
        data->enableConverter("itkDataImageToVistalDataImageUChar3Converter");
        d->input = data->convert("vistalDataImageUChar3");	

	if (!d->input)
	  return;  
    }

    else if (data->description() == "itkDataImageShort3")
    {
        data->addConverter("itkDataImageToVistalDataImageShort3Converter");
        data->enableConverter("itkDataImageToVistalDataImageShort3Converter");
	d->input = data->convert("vistalDataImageShort3");
	if (!d->input)	  	  
	  return;	
    }

    else if (data->description() == "itkDataImageUShort3")
    {
        data->addConverter("itkDataImageToVistalDataImageUShort3Converter");
        data->enableConverter("itkDataImageToVistalDataImageUShort3Converter");
        d->input = data->convert("vistalDataImageUShort3");
	
	if (!d->input)  
	  return;
    }

    else if (data->description() == "itkDataImageInt3")
    {
        data->addConverter("itkDataImageToVistalDataImageInt3Converter");
        data->enableConverter("itkDataImageToVistalDataImageInt3Converter");
	d->input = data->convert("vistalDataImageInt3");
	
	if (!d->input)
	  return;	
    }
    
    else if (data->description() == "itkDataImageUInt3")
    {
        data->addConverter("itkDataImageToVistalDataImageUInt3Converter");
        data->enableConverter("itkDataImageToVistalDataImageUInt3Converter");
	d->input = data->convert("vistalDataImageUInt3");
	
	if (!d->input)
	  return;
    }

    else if (data->description() == "itkDataImageFloat3")
    {
        data->addConverter("itkDataImageToVistalDataImageFloat3Converter");
        data->enableConverter("itkDataImageToVistalDataImageFloat3Converter");
        d->input = data->convert("vistalDataImageFloat3");       

	if (!(d->input))
	  return;	  
    }

    else if (data->description() == "itkDataImageDouble3")
    {
        qDebug() << "entering case itkDataImageDouble3";
        data->addConverter("itkDataImageToVistalDataImageDouble3Converter");
        data->enableConverter("itkDataImageToVistalDataImageDouble3Converter");
	d->input = data->convert("vistalDataImageDouble3");
	
	if (!d->input)
	  return;	
    }

    else if(data->description() == "vistalDataImageChar3")
    {
      d->input = data;
     
      if(!d->input)
	  return;      
    }  

    else if(data->description() == "vistalDataImageUChar3")
    {
      d->input = data;
     
      if(!d->input)
	  return;      
    }  
    
    else if(data->description() == "vistalDataImageShort3")
    {
      d->input = data;
      
      if(!d->input)	
	  return;
    } 

    else if(data->description() == "vistalDataImageUShort3")
    {
      d->input = data;
      
      if(!d->input)	
	  return;
    } 


    else if(data->description() == "vistalDataImageInt3")
    {
      d->input = data;
      
      if(!d->input)	
	  return;
    } 


    else if(data->description() == "vistalDataImageUInt3")
    {
      d->input = data;
      
      if(!d->input)	
	  return;
    } 

    else if(data->description() == "vistalDataImageFloat3")
    {
      d->input = data;
      
      if(!d->input)	
	  return;
    } 

    else if(data->description() == "vistalDataImageDouble3")
    {
      d->input = data;
      
      if(!d->input)	
	  return;
    } 
   
    else
    {
      qDebug() << "in setInput method : else input type";      
      return;     
    }
}



void vistalProcessDenoising::setParameter(double  data, int channel)
{
    switch (channel){

        case (0):
                d->seuil = data;
                break;
        case (1):
                d->beta = data;
                break;
        case (2):
                d->seuil_adapt = data;
                break;
        case (3):
                d->isotropic =data;
                break;
        case (4):
                d->S = data;
                break;
        case (5):
                d->M =data;
                break;
        case (6):
                d->testmean = data;
                break;
        case (7):
                d->testvar = data;
                break;
        case (8):
                d->m_min = data;
                break;
        case (9):
                d->v_min = data;
                break;
        case (10):
                d->weight_method = data;
                break;
        case (11):
                d->block = data;
                break;
        case (12):
                d->b_space = data;
                break;
	case (13):
		d->N_thread = (unsigned int)data;
		qDebug() << "channel = " << channel << "  data = " << data;
		qDebug() << "number of threads : " << d->N_thread;
		break;
        default :
                return;
        }
}


int vistalProcessDenoising::update (void)
{        
        if (d->input == NULL)
	{
	    qDebug() << "in update method : d->input == NULL";	  
            return -1;
	}

        if (d->input->description() == "vistalDataImageUChar3")
        {
            vistal::NLMeansDenoising<unsigned char> *nlmeans = new vistal::NLMeansDenoising<unsigned char>;

            if(nlmeans == NULL)
                return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<unsigned char> * > (d->input->data()));
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);

            nlmeans->run();

	    vistal::Image3D<unsigned char> * result = new vistal::Image3D<unsigned char>(*nlmeans->getOutput());
	    
	    d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageUChar3");
            if (d->output == NULL)
                return -1;	    

            d->output->setData(result); 
	    
	    if(d->output->data() == NULL)
	      return -1;

            delete nlmeans;
	    //delete result;
	    
        }
        else if (d->input->description() == "vistalDataImageUShort3")
        {
            vistal::NLMeansDenoising<unsigned short> *nlmeans = new vistal::NLMeansDenoising<unsigned short>;

            if(nlmeans == NULL)
                return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<unsigned short> * > (d->input->data()));
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);

            nlmeans->run();
	    
	    vistal::Image3D<unsigned short> * result = new vistal::Image3D<unsigned short>(*nlmeans->getOutput());

            d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageUShort3");
            if (d->output == NULL)
	      return -1;

            d->output->setData(result);

            if(d->output->data() == NULL)
                return -1;

            delete nlmeans;
	    //delete result;

        }
        else if (d->input->description() == "vistalDataImageFloat3")
        {	    
            vistal::NLMeansDenoising<float> *nlmeans = new vistal::NLMeansDenoising<float>;

            if(nlmeans == NULL)
                return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<float> * > (d->input->data()));
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);

            nlmeans->run();
	   
	    vistal::Image3D<float> * result = new vistal::Image3D<float>(*nlmeans->getOutput());

            d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageFloat3");
            if (d->output == NULL)
                return -1;

            d->output->setData(result);

            if(d->output->data() == NULL)
                return -1;

            delete nlmeans;
	    //delete result;

        }
        else if (d->input->description() == "vistalDataImageDouble3")
        {
            vistal::NLMeansDenoising<double> *nlmeans = new vistal::NLMeansDenoising<double>;

            if(nlmeans == NULL)
                return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<double> * > (d->input->data()));
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);

            nlmeans->run();
	    
	    vistal::Image3D<double> * result = new vistal::Image3D<double>(*nlmeans->getOutput());

            d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageDouble3");
            if (d->output == NULL)
                return -1;

            d->output->setData(result);

            if(d->output->data() == NULL)
                return -1;

            delete nlmeans;
	    //delete result;

        }
        else if (d->input->description() == "vistalDataImageShort3")
        {	  
            vistal::NLMeansDenoising<short> *nlmeans = new vistal::NLMeansDenoising<short>;

            if(nlmeans == NULL)
	      return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<short> * > (d->input->data()));
	    qDebug() << "After nlmeans->setInput method, toto";
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);
	    
            nlmeans->run();
	    
	    vistal::Image3D<short> * result = new vistal::Image3D<short>(*nlmeans->getOutput());
	    
            d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageShort3");
            if (d->output == NULL)
                return -1;

            d->output->setData(result);
	    
            if(d->output->data() == NULL)
                return -1;

            delete nlmeans;
	    //delete result;

        }
        else if (d->input->description() == "vistalDataImageInt3")
        {
            vistal::NLMeansDenoising<int> *nlmeans = new vistal::NLMeansDenoising<int>;

            if(nlmeans == NULL)
                return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<int> * > (d->input->data()));
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);	    
	    
            nlmeans->run();
	    
	    vistal::Image3D<int> * result = new vistal::Image3D<int>(*nlmeans->getOutput());

            d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageInt3");
            if (d->output == NULL)
                return -1;

            d->output->setData(result);

            if(d->output->data() == NULL)
                return -1;

            delete nlmeans;
	    //delete result;

        }
        else if (d->input->description() == "vistalDataImageUInt3")
        {
            vistal::NLMeansDenoising<unsigned int> *nlmeans = new vistal::NLMeansDenoising<unsigned int>;

            if(nlmeans == NULL)
                return -1;

            nlmeans->setInput(static_cast<vistal::Image3D<unsigned int> * > (d->input->data()));
            nlmeans->setAdaptiveSlope(d->seuil_adapt);
            nlmeans->setSigma(d->seuil);
            nlmeans->setBeta(d->beta);
            nlmeans->setIsotropicNeighborhood(d->isotropic);
            nlmeans->setNeighborhoodSize(d->S);
            nlmeans->setSearchVolumeSize(d->M);
            nlmeans->setBlockApproach(d->block);
            nlmeans->setTestOnMean(d->testmean);
            nlmeans->setTestOnVar(d->testvar);
            nlmeans->setMeanMinRatio(d->m_min);
            nlmeans->setVarMinRatio(d->v_min);
            nlmeans->setWeightingMethod(d->weight_method);
            nlmeans->setDistanceBetweenBlocks(d->b_space);
	    nlmeans->setNumberOfThreads(d->N_thread);

            nlmeans->run();
	    
	    vistal::Image3D<unsigned int> * result = new vistal::Image3D<unsigned int>(*nlmeans->getOutput());

            d->output = dtkAbstractDataFactory::instance()->create("vistalDataImageUInt3");
            if (d->output == NULL)
                return -1;

            d->output->setData(result);

            if(d->output->data() == NULL)
                return -1;

            delete nlmeans;
	    //delete result;

        }
        else
            return -1;
    
        foreach(QString list, d->input->metaDataList())
                d->output->addMetaData(list, d->input->metaDataValues(list));

        return EXIT_SUCCESS;

}

dtkAbstractData * vistalProcessDenoising::output(void)
{	
	return (d->output);
}


// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess * createVistalProcessDenoising(void)
{
    return new vistalProcessDenoising;
}
