// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#pragma once

#include <dtkCore/dtkAbstractProcess.h>
#include <medAbstractData.h>

#include "animaSymmetryPlanePluginExport.h"

class animaSymmetryPlanePrivate;

class ANIMASYMMETRYPLANEPLUGIN_EXPORT animaSymmetryPlane : public dtkAbstractProcess
{
    Q_OBJECT

public:
    animaSymmetryPlane();

    virtual ~animaSymmetryPlane();

    virtual QString description() const;

    static bool registered();
    
    void saveTransformFile(QString filename);

    void saveRealignTransformFile(QString filename);

    void emitProgress(int prog);
    
    // Parameters setting
    void setMetric(int m);
    void setOptimizerType(int opt);
    void setOptimizerMaximumIterations(unsigned int mit);
    void setHistogramSize(unsigned int hSize);
    void setSearchRadius(double sRadius);
    void setSearchAngleRadius(double saRadius);
    void setFinalRadius(double fRadius);

    void setNumberOfPyramidLevels(unsigned int pLevels);
    void setNumberOfThreads(unsigned int nThreads);

public slots:

    //! Input data to the plugin is set through here
    void setInputImage(medAbstractData *data);

    //! Method to actually start the filter
    int update();

    //! The output will be available through here
    medAbstractData *output();


private:
    animaSymmetryPlanePrivate *d;
};

dtkAbstractProcess *createAnimaSymmetryPlane(void);
