// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "animaSymmetryPlane.h"

#include <dtkCore/dtkAbstractProcessFactory.h>
#include <dtkCore/dtkSmartPointer.h>

#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractProcess.h>

#include <pyramidalSymmetryBridge.h>


class animaSymmetryPlanePrivate
{
public:

    typedef double ScalarType;
    typedef typename itk::SymmetryPlaneTransform<ScalarType> TransformType;
    typedef typename TransformType::Pointer TransformPointer;
    typedef typename itk::AffineTransform<ScalarType,3> BaseTransformType;
    typedef typename BaseTransformType::Pointer BaseTransformPointer;

    dtkSmartPointer <dtkAbstractData> input;
    dtkSmartPointer <dtkAbstractData> output;

    animaSymmetryPlane* parent;

    Metric metric;
    OptimizerType optType;
    int optMaxIterations;
    int histogramSize;
    double searchRadius;
    double searchAngleRadius;
    double finalRadius;
    int numberOfPyramidLevels;
    int numberOfThreads;

    BaseTransformPointer outputRealignTransform;
    TransformPointer outputTransform;

    itk::CStyleCommand::Pointer callback;



    animaSymmetryPlanePrivate( animaSymmetryPlane* parent );

    ~animaSymmetryPlanePrivate( void );

    template <class PixelType> void process ( void );

    void saveTransformFile( QString filename );

    void saveRealignTransformFile( QString filename );

    static void eventCallback ( itk::Object *caller, const itk::EventObject& event, void *clientData );

};

// /////////////////////////////////////////////////////////////////
// animaSymmetryPlanePrivate
// /////////////////////////////////////////////////////////////////


animaSymmetryPlanePrivate::animaSymmetryPlanePrivate(animaSymmetryPlane* parentProcess)
{
    parent = parentProcess;

    //default values
    metric = MeanSquares;
    optType = Newuoa;
    optMaxIterations = 100;
    histogramSize = 120;
    searchRadius = 2;
    searchAngleRadius = 5;
    finalRadius = 0.001;
    numberOfPyramidLevels = 3;
    numberOfThreads = 2;

    outputTransform = NULL;
    outputRealignTransform = NULL;
}

animaSymmetryPlanePrivate::~animaSymmetryPlanePrivate(void)
{

}

void animaSymmetryPlanePrivate::eventCallback ( itk::Object* caller, const itk::EventObject& event, void* clientData )
 {
     animaSymmetryPlanePrivate * source = reinterpret_cast<animaSymmetryPlanePrivate *> ( clientData );
     itk::ProcessObject * processObject = ( itk::ProcessObject* ) caller;

     if ( !source )
         qDebug() << "Source is null";

     source->parent->emitProgress((int) (processObject->GetProgress() * 100));
 }

template <class PixelType>
void animaSymmetryPlanePrivate::process ( void )
{
    typedef itk::Image <PixelType,3> InputImageType;
    typedef itk::Image <float,3> OutImageType;
    typedef PyramidalSymmetryBridge <PixelType, ScalarType> PyramidSymType;

    PyramidSymType *matcher = new PyramidSymType;

    // set callback
    callback = itk::CStyleCommand::New();
    callback->SetClientData ( ( void * ) this );
    callback->SetCallback ( animaSymmetryPlanePrivate::eventCallback );
    matcher->SetProgressCallback(callback);

    // set parameters
    matcher->SetMetric(metric);
    matcher->SetOptimizerType(optType);
    matcher->SetOptimizerMaxIterations(optMaxIterations);
    matcher->SetHistogramSize(histogramSize);
    matcher->SetSearchRadius(searchRadius);
    matcher->SetSearchAngleRadius(searchAngleRadius);
    matcher->SetFinalRadius(finalRadius);
    matcher->SetNumberOfPyramidLevels(numberOfPyramidLevels);
    matcher->SetNumberOfThreads(numberOfThreads);

    // set images
    matcher->SetReferenceImage( dynamic_cast<InputImageType *> ( ( itk::Object* ) input->data() ) );
    matcher->SetFloatingImage(  dynamic_cast<InputImageType *> ( ( itk::Object* ) input->data() ) );

    // process image
    matcher->Update();

    // retrieve results (images and transforms)
    output->setData ( matcher->GetOutputImage() );
    outputRealignTransform = matcher->GetOutputRealignTransform();
    outputTransform = matcher->GetOutputTransform();

    delete matcher;
}


void animaSymmetryPlanePrivate::saveTransformFile(QString filename)
{
    if(outputTransform && !filename.isEmpty())
    {
        std::cout << "Writing output transform to: " << filename.toStdString() << std::endl;
        itk::TransformFileWriter::Pointer writer = itk::TransformFileWriter::New();

        // SymmetryPlaneTransforms should not be written as is, this loses information
        typename BaseTransformType::Pointer tmpTrsf = BaseTransformType::New();
        tmpTrsf->SetMatrix(outputTransform->GetMatrix());
        tmpTrsf->SetOffset(outputTransform->GetOffset());

        writer->SetInput(tmpTrsf);
        writer->SetFileName(filename.toStdString());
        writer->Update();
    }
}

void animaSymmetryPlanePrivate::saveRealignTransformFile(QString filename)
{
    if(outputRealignTransform && !filename.isEmpty())
    {
        std::cout << "Writing output realign transform to: " << filename.toStdString() << std::endl;
        itk::TransformFileWriter::Pointer writer = itk::TransformFileWriter::New();
        writer->SetInput(outputRealignTransform);
        writer->SetFileName(filename.toStdString());
        writer->Update();
    }
}

// /////////////////////////////////////////////////////////////////
// animaSymmetryPlane
// /////////////////////////////////////////////////////////////////

animaSymmetryPlane::animaSymmetryPlane(void) : dtkAbstractProcess(), d(new animaSymmetryPlanePrivate(this))
{

}

animaSymmetryPlane::~animaSymmetryPlane(void)
{
    delete d;
    d = NULL;
}


bool animaSymmetryPlane::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("animaSymmetryPlane", createAnimaSymmetryPlane);
}

QString animaSymmetryPlane::description(void) const
{
    return "animaSymmetryPlane";
}

void animaSymmetryPlane::setInput ( dtkAbstractData *data )
{
    if ( !data )
        return;

    QString identifier = data->identifier();
    qDebug() << identifier;

    d->output = dtkAbstractDataFactory::instance()->createSmartPointer ( "itkDataImageFloat3" );

    d->input = data;
}

void animaSymmetryPlane::setParameter ( double  data, int channel )
{
    switch (channel)
    {
    case 0:
      d->metric = (Metric)data;
      break;
    case 1:
      d->optType = (OptimizerType)data;
      break;
    case 2:
      d->optMaxIterations= data;
      break;
    case 3:
      d->histogramSize = data;
      break;
    case 4:
      d->searchRadius = data;
      break;
    case 5:
      d->searchAngleRadius = data;
      break;
    case 6:
      d->finalRadius = data;
      break;
    case 7:
      d->numberOfPyramidLevels= data;
      break;
    case 8:
      d->numberOfThreads = data;
      break;
    default :
      break;
    }
}


void animaSymmetryPlane::emitProgress(int prog)
{
    emit progressed(prog);
}


int animaSymmetryPlane::update ( void )
{
    if ( !d->input )
        return -1;

    QString id = d->input->identifier();

    qDebug() << "itkFilters, update : " << id;

    if ( id == "itkDataImageChar3" )
    {
        d->process<char>();
    }
    else if ( id == "itkDataImageUChar3" )
    {
        d->process<unsigned char>();
    }
    else if ( id == "itkDataImageShort3" )
    {
        d->process<short>();
    }
    else if ( id == "itkDataImageUShort3" )
    {
        d->process<unsigned short>();
    }
    else if ( id == "itkDataImageInt3" )
    {
        d->process<int>();
    }
    else if ( id == "itkDataImageUInt3" )
    {
        d->process<unsigned int>();
    }
    else if ( id == "itkDataImageLong3" )
    {
        d->process<long>();
    }
    else if ( id== "itkDataImageULong3" )
    {
        d->process<unsigned long>();
    }
    else if ( id == "itkDataImageFloat3" )
    {
        d->process<float>();
    }
    else if ( id == "itkDataImageDouble3" )
    {
        d->process<double>();
    }
    else
    {
        qDebug() << "Error : pixel type not yet implemented ("
        << id
        << ")";
        return -1;
    }

    return EXIT_SUCCESS;
}


dtkAbstractData * animaSymmetryPlane::output ( void )
{
    return ( d->output );
}


void animaSymmetryPlane::saveTransformFile(QString filename)
{
    std::cout  << "Writing to " << filename.toStdString();
    d->saveTransformFile(filename);
}

void animaSymmetryPlane::saveRealignTransformFile(QString filename)
{
    d->saveRealignTransformFile(filename);
}


// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createAnimaSymmetryPlane(void)
{
    return new animaSymmetryPlane;
}





