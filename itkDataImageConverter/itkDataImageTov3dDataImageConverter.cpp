// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "itkDataImageTov3dDataImageConverter.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

#include "itkImage.h"
#include "itkImageToVTKImageFilter.h"

// /////////////////////////////////////////////////////////////////
// itkDataImageTov3dDataImageConverterPrivate
// /////////////////////////////////////////////////////////////////

class itkDataImageTov3dDataImageConverterPrivate
{
public:
    typedef itk::ImageToVTKImageFilter< itk::Image<unsigned char, 3> >  UChar3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<char, 3> >           Char3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<unsigned short, 3> > UShort3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<short, 3> >          Short3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<unsigned int, 3> >   UInt3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<int, 3> >            Int3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<unsigned long, 3> >  ULong3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<long, 3> >           Long3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<float, 3> >          Float3ConverterType;
    typedef itk::ImageToVTKImageFilter< itk::Image<double, 3> >         Double3ConverterType;
  
    dtkAbstractData *output;

    UChar3ConverterType::Pointer  uchar3converter;
    Char3ConverterType::Pointer   char3converter;
    UShort3ConverterType::Pointer ushort3converter;
    Short3ConverterType::Pointer  short3converter;
    UInt3ConverterType::Pointer   uint3converter;
    Int3ConverterType::Pointer    int3converter;
    ULong3ConverterType::Pointer  ulong3converter;
    Long3ConverterType::Pointer   long3converter;
    Float3ConverterType::Pointer  float3converter;
    Double3ConverterType::Pointer double3converter;
};

// /////////////////////////////////////////////////////////////////
// itkDataImageTov3dDataImageConverter
// /////////////////////////////////////////////////////////////////

itkDataImageTov3dDataImageConverter::itkDataImageTov3dDataImageConverter(void) : dtkAbstractDataConverter(), d(new itkDataImageTov3dDataImageConverterPrivate)
{
    d->output = dtkAbstractDataFactory::instance()->create("v3dDataImage");
    d->uchar3converter = 0;
    d->char3converter = 0;
    d->ushort3converter = 0;
    d->short3converter = 0;
    d->uint3converter = 0;
    d->int3converter = 0;
    d->ulong3converter = 0;
    d->long3converter = 0;
    d->float3converter = 0;
    d->double3converter = 0;
}

itkDataImageTov3dDataImageConverter::~itkDataImageTov3dDataImageConverter(void)
{

}

bool itkDataImageTov3dDataImageConverter::registered(void)
{
  return dtkAbstractDataFactory::instance()->registerDataConverterType("itkDataImageTov3dDataImageConverter", QStringList()
								       << "itkDataImageUChar3"
								       << "itkDataImageChar3"
								       << "itkDataImageUShort3"
								       << "itkDataImageShort3"
								       << "itkDataImageUInt3"
								       << "itkDataImageInt3"
								       << "itkDataImageULong3"
								       << "itkDataImageLong3"
								       << "itkDataImageFloat3"
								       << "itkDataImageDouble3",
								       "v3dDataImage",
								       createItkDataImageTov3dDataImageConverter
								       );
}

QString itkDataImageTov3dDataImageConverter::description(void) const
{
    return "itkDataImageTov3dDataImageConverter";
}

QStringList itkDataImageTov3dDataImageConverter::fromTypes(void) const
{
    return QStringList() << "itkDataImageUChar3"
			 << "itkDataImageChar3"
			 << "itkDataImageUShort3"
			 << "itkDataImageShort3"
			 << "itkDataImageUInt3"
			 << "itkDataImageInt3"
			 << "itkDataImageULong3"
			 << "itkDataImageLong3"
			 << "itkDataImageFloat3"
			 << "itkDataImageDouble3";
}

QString itkDataImageTov3dDataImageConverter::toType(void) const
{
    return "v3dDataImage";
}

dtkAbstractData *itkDataImageTov3dDataImageConverter::convert (void)
{
    if (!d->output)
        return NULL;

    dtkAbstractData *data = this->data();
    if (!data)
        return NULL;

    if (data->description()=="itkDataImageUChar3")
    {
      if( itk::Image<unsigned char, 3>* image = dynamic_cast<itk::Image<unsigned char, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->uchar3converter.IsNull() )
	      d->uchar3converter = itkDataImageTov3dDataImageConverterPrivate::UChar3ConverterType::New();
	
	  d->uchar3converter->SetInput ( image );
	  d->uchar3converter->Update();
	  d->output->setData ( d->uchar3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageChar3")
    {
      if( itk::Image<char, 3>* image = dynamic_cast<itk::Image<char, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->char3converter.IsNull() )
	      d->char3converter = itkDataImageTov3dDataImageConverterPrivate::Char3ConverterType::New();
	
	  d->char3converter->SetInput ( image );
	  d->char3converter->Update();
	  d->output->setData ( d->char3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageUShort3")
    {
      if( itk::Image<unsigned short, 3>* image = dynamic_cast<itk::Image<unsigned short, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->ushort3converter.IsNull() )
	      d->ushort3converter = itkDataImageTov3dDataImageConverterPrivate::UShort3ConverterType::New();
	
	  d->ushort3converter->SetInput ( image );
	  d->ushort3converter->Update();
	  d->output->setData ( d->ushort3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageShort3")
    {
      if( itk::Image<short, 3>* image = dynamic_cast<itk::Image<short, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->short3converter.IsNull() )
	      d->short3converter = itkDataImageTov3dDataImageConverterPrivate::Short3ConverterType::New();
	
	  d->short3converter->SetInput ( image );
	  d->short3converter->Update();
	  d->output->setData ( d->short3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageUInt3")
    {
      if( itk::Image<unsigned int, 3>* image = dynamic_cast<itk::Image<unsigned int, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->uint3converter.IsNull() )
	      d->uint3converter = itkDataImageTov3dDataImageConverterPrivate::UInt3ConverterType::New();
	
	  d->uint3converter->SetInput ( image );
	  d->uint3converter->Update();
	  d->output->setData ( d->uint3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageInt3")
    {
      if( itk::Image<int, 3>* image = dynamic_cast<itk::Image<int, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->int3converter.IsNull() )
	      d->int3converter = itkDataImageTov3dDataImageConverterPrivate::Int3ConverterType::New();
	
	  d->int3converter->SetInput ( image );
	  d->int3converter->Update();
	  d->output->setData ( d->int3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageULong3")
    {
      if( itk::Image<unsigned long, 3>* image = dynamic_cast<itk::Image<unsigned long, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->ulong3converter.IsNull() )
	      d->ulong3converter = itkDataImageTov3dDataImageConverterPrivate::ULong3ConverterType::New();
	
	  d->ulong3converter->SetInput ( image );
	  d->ulong3converter->Update();
	  d->output->setData ( d->ulong3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageLong3")
    {
      if( itk::Image<long, 3>* image = dynamic_cast<itk::Image<long, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->long3converter.IsNull() )
	      d->long3converter = itkDataImageTov3dDataImageConverterPrivate::Long3ConverterType::New();
	
	  d->long3converter->SetInput ( image );
	  d->long3converter->Update();
	  d->output->setData ( d->long3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageFloat3")
    {
      if( itk::Image<float, 3>* image = dynamic_cast<itk::Image<float, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->float3converter.IsNull() )
	      d->float3converter = itkDataImageTov3dDataImageConverterPrivate::Float3ConverterType::New();
	
	  d->float3converter->SetInput ( image );
	  d->float3converter->Update();
	  d->output->setData ( d->float3converter->GetOutput() );
      }
    }
    else if (data->description()=="itkDataImageDouble3")
    {
      if( itk::Image<double, 3>* image = dynamic_cast<itk::Image<double, 3>*>( (itk::Object*)( data->data() ) ) ) {

	  if (d->double3converter.IsNull() )
	      d->double3converter = itkDataImageTov3dDataImageConverterPrivate::Double3ConverterType::New();
	
	  d->double3converter->SetInput ( image );
	  d->double3converter->Update();
	  d->output->setData ( d->double3converter->GetOutput() );
      }
    }
    
    return d->output;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataConverter *createItkDataImageTov3dDataImageConverter(void)
{
    return new itkDataImageTov3dDataImageConverter;
}
