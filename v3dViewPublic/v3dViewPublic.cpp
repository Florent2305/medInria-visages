// /////////////////////////////////////////////////////////////////
// Generated byview2D dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "v3dViewPublic.h"

#include <dtkCore/dtkAbstractDataImage.h>
#include <dtkCore/dtkAbstractViewFactory.h>

#include "vtkRenderer.h"
#include "vtkViewImage.h"
#include "vtkViewImage2D.h"
#include "vtkViewImage3D.h"
#include "vtkViewImage2DCommand.h"
#include <vtkRenderer.h>
#include <vtkRenderWindow.h>
#include <vtkCamera.h>
#include <vtkLookupTableManager.h>
#include <vtkOrientedBoxWidget.h>

#include <QVTKWidget.h>

// /////////////////////////////////////////////////////////////////////////////////////////////////////////
// v3dViewObserver: links a QSlider with the ViewImagePositionChangeEvent of a vtkViewImage instance.
// /////////////////////////////////////////////////////////////////////////////////////////////////////////

class v3dViewPublicObserver : public vtkCommand
{
public:
    static v3dViewPublicObserver* New(void) { return new v3dViewPublicObserver; }
    
    void Execute(vtkObject *caller, unsigned long event, void *callData);
    
    void setSlider(QSlider *slider) {
        this->slider = slider;
    }
    
    void setView(vtkViewImage2D *view){
        this->view = view;
    }
    
    inline void   lock(void) { this->m_lock = 1; }
    inline void unlock(void) { this->m_lock = 0; }
    
protected:
     v3dViewPublicObserver(void);
    ~v3dViewPublicObserver(void);
    
private:
    int             m_lock;
    QSlider        *slider;
    vtkViewImage2D *view;
};

v3dViewPublicObserver::v3dViewPublicObserver(void)
{
    this->slider = 0;
    this->m_lock = 0;
}

v3dViewPublicObserver::~v3dViewPublicObserver(void)
{
}

void v3dViewPublicObserver::Execute(vtkObject *caller, unsigned long event, void *callData)
{
    if (this->m_lock)
        return;
    
	if (this->slider && this->view) {
	    unsigned int zslice = this->view->GetZSlice();
	    this->slider->blockSignals (true);
	    this->slider->setValue (zslice);
	    this->slider->update();
	    this->slider->blockSignals (false);
	    //qApp->processEvents(); // cause a crash when opening very fast multiple images
	}
}

// /////////////////////////////////////////////////////////////////
// v3dViewPublicPrivate
// /////////////////////////////////////////////////////////////////

class v3dViewPublicPrivate
{
public:
    vtkRenderer *renderer2D;
    vtkRenderer *renderer3D;
    vtkViewImage2D *view2D;
    vtkViewImage3D *view3D;
	
    vtkViewImage *currentView;	
	
    QWidget    *widget;	
    QVTKWidget *vtkWidget2D;
    QVTKWidget *vtkWidget3D;	
	
    dtkAbstractData      *data;
    dtkAbstractDataImage *imageData;

    QString orientation;
	
    QList<dtkAbstractView*> linkedViews;	
	
    QMenu *menu;
  //QStackedLayout *stackedLayout;
  QStackedWidget *stackedWidget;

    QSlider    *slider;
    QComboBox  *dimensionBox;
    QPushButton *anchorButton;
    QPushButton *linkButton;
    QPushButton *linkWLButton;
    QPushButton *fullScreenButton;
    QPushButton *registerButton;
    QPushButton *playButton;	
    QPushButton *closeButton;
    QTimeLine *timeline;	

    vtkViewImage *lastLinked;

    v3dViewPublicObserver *observer;
};

// /////////////////////////////////////////////////////////////////
// v3dViewPublic
// /////////////////////////////////////////////////////////////////

v3dViewPublic::v3dViewPublic(void) : medAbstractView(), d(new v3dViewPublicPrivate)
{
    d->data       = 0;
    d->imageData  = 0;
    d->orientation = "Axial";
    d->lastLinked = 0;
	
    d->timeline = new QTimeLine(1000, this);
    d->timeline->setLoopCount(0);
    connect(d->timeline, SIGNAL(frameChanged(int)), this, SLOT(onZSliderValueChanged(int)));	
	
    d->widget = new QWidget;
    d->widget->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);

    d->stackedWidget = new QStackedWidget (d->widget);
    d->stackedWidget->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);

    d->vtkWidget2D = new QVTKWidget(d->stackedWidget);
    d->vtkWidget2D->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    d->vtkWidget2D->setFocusPolicy(Qt::NoFocus);
    
    d->vtkWidget3D = new QVTKWidget(d->stackedWidget);
    d->vtkWidget3D->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    d->vtkWidget3D->setFocusPolicy(Qt::NoFocus);

    d->stackedWidget->addWidget(d->vtkWidget2D);
    d->stackedWidget->addWidget(d->vtkWidget3D);
    d->stackedWidget->setCurrentIndex(0);

    /*
      d->stackedLayout = new QStackedLayout;
      d->stackedLayout->addWidget(d->vtkWidget2D);
      d->stackedLayout->addWidget(d->vtkWidget3D);
      d->stackedLayout->setCurrentIndex(0);
    */
    
    d->renderer2D = vtkRenderer::New();
    d->view2D = vtkViewImage2D::New();    
    d->view2D->SetRenderer(d->renderer2D);
    d->view2D->SetBackgroundColor(0.0, 0.0, 0.0);
    d->view2D->SetLeftButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    d->view2D->SetMiddleButtonInteractionStyle(vtkViewImage2D::SELECT_INTERACTION);
    d->view2D->SetRightButtonInteractionStyle(vtkViewImage2D::NO_INTERACTION);
    d->view2D->SetOrientation (vtkViewImage2D::AXIAL_ID);
    d->view2D->CursorFollowMouseOff();
    d->view2D->Show2DAxisOff();
    d->view2D->SetScalarBarVisibility(0);
    d->view2D->RulerWidgetVisibilityOn();
    d->view2D->SetLinkPosition (0);
    d->view2D->SetLinkZoom (0);
    d->view2D->SetLinkCameraFocalAndPosition (0);	
    d->view2D->SetLinkWindowLevel (0);
    d->view2D->SetLinkVolumeIndex (0);
    d->view2D->SetAboutData("v3dViewPublic plugin");
    d->currentView = d->view2D;
    
    // Setting up 3D view
    d->renderer3D = vtkRenderer::New();
    d->renderer3D->GetActiveCamera()->SetPosition(0, -1, 0);
    d->renderer3D->GetActiveCamera()->SetViewUp(0, 0, 1);
    d->renderer3D->GetActiveCamera()->SetFocalPoint(0, 0, 0);
	
    d->view3D = vtkViewImage3D::New();
    d->view3D->SetRenderer(d->renderer3D);
    d->view3D->BoxWidgetVisibilityOff();
    d->view3D->SetCropping(0);
    d->view3D->SetScalarBarVisibility(0);
    double color[3] = {1.0,1.0,1.0};
    d->view3D->SetTextColor(color);
    d->view3D->ShadeOn();    
    d->view3D->SetLinkPosition (0);
    d->view3D->SetLinkZoom (0);
    d->view3D->SetLinkCameraFocalAndPosition (0);	
    d->view3D->SetLinkWindowLevel (0);
    d->view3D->SetLinkVolumeIndex (0);
    d->view3D->SetAboutData("v3dViewPublic plugin");
    d->view2D->AddChild( d->view3D );
    // d->view3D->AddChild ( d->view2D );
    
    vtkRenderWindow* renwinAxial = vtkRenderWindow::New();
    renwinAxial->StereoCapableWindowOn();
    renwinAxial->SetStereoTypeToCrystalEyes();
    
    vtkRenderWindow* renwin3D = vtkRenderWindow::New();
    renwin3D->StereoCapableWindowOn();
    renwin3D->SetStereoTypeToCrystalEyes();
	
    d->vtkWidget2D->SetRenderWindow(renwinAxial);
    d->vtkWidget3D->SetRenderWindow(renwin3D);

    renwinAxial->Delete();
    renwin3D->Delete();
	
    d->view3D->SetRenderWindowInteractor(d->vtkWidget3D->GetRenderWindow()->GetInteractor());
    d->view3D->SetRenderWindow(d->vtkWidget3D->GetRenderWindow());
    
    d->view2D->SetRenderWindowInteractor(d->vtkWidget2D->GetRenderWindow()->GetInteractor());	
    d->view2D->SetRenderWindow(d->vtkWidget2D->GetRenderWindow()); // set the interactor as well
    
    d->slider = new QSlider(Qt::Horizontal, d->widget);
    d->slider->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Fixed);
    d->slider->setFocusPolicy(Qt::NoFocus);
    
    d->observer = v3dViewPublicObserver::New();
    d->observer->setSlider(d->slider);
    d->view2D->AddObserver(vtkViewImage2D::ViewImagePositionChangeEvent, d->observer, 0);
    d->observer->setView ( d->view2D );
    
    d->dimensionBox = new QComboBox(d->widget);
    d->dimensionBox->setFocusPolicy(Qt::NoFocus);
    d->dimensionBox->addItem( tr("Slice") );
    d->dimensionBox->addItem( tr("Volume") );
    d->dimensionBox->setCurrentIndex( 0 );
    d->dimensionBox->setMaximumHeight(16);
    d->dimensionBox->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Fixed);
    d->dimensionBox->setMaximumWidth(64);    
	

    QAction *axialAct = new QAction(tr("Axial"), d->widget);
    connect(axialAct, SIGNAL(triggered()), this, SLOT(switchToAxial()));
    
    QAction *coronalAct = new QAction(tr("Coronal"), d->widget);
    connect(coronalAct, SIGNAL(triggered()), this, SLOT(switchToCoronal()));
    
    QAction *sagittalAct = new QAction(tr("Sagittal"), d->widget);
    connect(sagittalAct, SIGNAL(triggered()), this, SLOT(switchToSagittal()));
    
    QAction *vrAct = new QAction(tr("VR"), d->widget);
    connect(vrAct, SIGNAL(triggered()), this, SLOT(switchToVR()));
    
    QAction *vrGPUAct = new QAction(tr("VR (GPU)"), d->widget);
    connect(vrGPUAct, SIGNAL(triggered()), this, SLOT(switchToVRGPU()));

    QAction *mprAct = new QAction(tr("MPR"), d->widget);
    connect(mprAct, SIGNAL(triggered()), this, SLOT(switchToMPR()));
    
    // Tools
    QAction *zoomAct = new QAction(tr("Zoom"), d->widget);
    connect(zoomAct, SIGNAL(triggered()), this, SLOT(onMenuZoomTriggered()));
    
    QAction *wlAct = new QAction(tr("Window / Level"), d->widget);
    connect(wlAct, SIGNAL(triggered()), this, SLOT(onMenuWindowLevelTriggered()));
    
    QActionGroup *group = new QActionGroup(d->widget);
    group->addAction(zoomAct);
    group->addAction(wlAct);
    wlAct->setChecked(true);
    
    d->menu = new QMenu(d->widget );
    d->menu->addAction(axialAct);
    d->menu->addAction(coronalAct);
    d->menu->addAction(sagittalAct);
    
    QMenu *tridMenu = d->menu->addMenu (tr ("3D"));
    tridMenu->addAction (vrAct);
    tridMenu->addAction (vrGPUAct);
    tridMenu->addAction (mprAct);

    d->menu->addSeparator();
    d->menu->addAction(zoomAct);
    d->menu->addAction(wlAct);
    
    d->anchorButton = new QPushButton(d->widget);
    d->anchorButton->setIcon (QIcon(":/icons/anchor.png"));
    d->anchorButton->setCheckable(true);
    d->anchorButton->setMaximumHeight(16);
    d->anchorButton->setMaximumWidth(16);
    d->anchorButton->setFocusPolicy(Qt::NoFocus);
    d->anchorButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->anchorButton->setObjectName("tool");
    
    connect(d->anchorButton, SIGNAL(clicked(bool)), this, SIGNAL(becomeDaddy(bool)));
    
    d->linkButton = new QPushButton(d->widget);
    d->linkButton->setIcon (QIcon(":/icons/link.png"));
    d->linkButton->setCheckable(true);
    d->linkButton->setMaximumHeight(16);
    d->linkButton->setMaximumWidth(16);
    d->linkButton->setFocusPolicy(Qt::NoFocus);
    d->linkButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->linkButton->setObjectName("tool");

    connect(d->linkButton, SIGNAL(clicked(bool)), this, SIGNAL(syncPosition(bool)));

    d->linkWLButton = new QPushButton(d->widget);
    d->linkWLButton->setIcon (QIcon(":/icons/link_wl.png"));
    d->linkWLButton->setCheckable(true);
    d->linkWLButton->setMaximumHeight(16);
    d->linkWLButton->setMaximumWidth(16);
    d->linkWLButton->setFocusPolicy(Qt::NoFocus);
    d->linkWLButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->linkWLButton->setObjectName("tool");

    connect(d->linkWLButton, SIGNAL(clicked(bool)), this, SIGNAL(syncWindowing(bool)));

    d->fullScreenButton = new QPushButton(d->widget);
    // d->fullScreenButton->setIcon (QIcon(":/icons/link_wl.png"));
    d->fullScreenButton->setText("M");
    d->fullScreenButton->setCheckable(true);
    d->fullScreenButton->setMaximumHeight(16);
    d->fullScreenButton->setMaximumWidth(16);
    d->fullScreenButton->setFocusPolicy(Qt::NoFocus);
    d->fullScreenButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->fullScreenButton->setObjectName("tool");
    
    connect(d->fullScreenButton, SIGNAL(clicked(bool)), this, SIGNAL(fullScreen(bool)));

    d->registerButton = new QPushButton(d->widget);
    d->registerButton->setIcon (QIcon(":/icons/cog.png"));
    d->registerButton->setCheckable(true);
    d->registerButton->setMaximumHeight(16);
    d->registerButton->setMaximumWidth(16);
    d->registerButton->setFocusPolicy(Qt::NoFocus);
    d->registerButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->registerButton->setObjectName("tool");

    connect(d->registerButton, SIGNAL(clicked(bool)), this, SIGNAL(reg(bool)));

    d->playButton = new QPushButton(d->widget);
    d->playButton->setText(">");
    d->playButton->setCheckable(true);
    d->playButton->setMaximumHeight(16);
    d->playButton->setMaximumWidth(16);
    d->playButton->setFocusPolicy(Qt::NoFocus);
    d->playButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->playButton->setObjectName("tool");
	
    connect(d->playButton, SIGNAL(clicked(bool)), this, SLOT(onPlayButtonClicked(bool)));
	
    d->closeButton = new QPushButton(d->widget);
    d->closeButton->setText("x");
    d->closeButton->setCheckable(false);
    d->closeButton->setMaximumHeight(16);
    d->closeButton->setMaximumWidth(16);
    d->closeButton->setFocusPolicy(Qt::NoFocus);
    d->closeButton->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    d->closeButton->setObjectName("tool");

    connect(d->closeButton, SIGNAL(clicked()), this, SIGNAL(closing()));

    QButtonGroup *toolButtonGroup = new QButtonGroup(d->widget);
    toolButtonGroup->addButton(d->anchorButton);
    toolButtonGroup->addButton(d->linkButton);
    toolButtonGroup->setExclusive(false);

    QHBoxLayout *toolsLayout = new QHBoxLayout;
    toolsLayout->setContentsMargins(0, 0, 0, 0);
    toolsLayout->setSpacing(0);
    toolsLayout->addWidget(d->dimensionBox);
    toolsLayout->addWidget(d->playButton);	
    toolsLayout->addWidget(d->slider);
    toolsLayout->addWidget(d->anchorButton);
    toolsLayout->addWidget(d->linkButton);
    toolsLayout->addWidget(d->linkWLButton);
    toolsLayout->addWidget(d->registerButton);
    toolsLayout->addWidget(d->fullScreenButton);
    toolsLayout->addWidget(d->closeButton);

    QVBoxLayout *layout = new QVBoxLayout(d->widget);
    layout->setContentsMargins(0, 0, 0, 0);
    layout->setSpacing(0);
    layout->addLayout(toolsLayout);
    //layout->addLayout(d->stackedLayout);
    layout->addWidget (d->stackedWidget);
    
    // set property to actually available presets
    QStringList lut;
    typedef std::vector< std::string > StdStrVec;
    StdStrVec presets = vtkLookupTableManager::GetAvailableLookupTables();
    for ( StdStrVec::iterator it( presets.begin() ), end( presets.end() );
         it != end; ++it )
        lut << QString::fromStdString( * it );
    
    this->addProperty ("LookupTable",           lut);
    
    // set default properties
    this->setProperty ("Orientation",          "Axial");
    this->setProperty ("ShowScalarBar",        "false");
    this->setProperty ("ShowAxis",             "false");
    this->setProperty ("ShowRuler",            "true");
    this->setProperty ("ShowAnnotations",      "true");
    this->setProperty ("LookupTable",          "Default");
    this->setProperty ("MouseInteraction",     "Zooming");
    // this->setProperty ("3DMode",               "VR");
    this->setProperty ("Renderer",             "GPU");
    this->setProperty ("UseLOD",               "On");
    this->setProperty ("Cropping",             "false");
    this->setProperty ("Preset",               "None");

    this->setProperty ("PositionLinked",   "false");
    this->setProperty ("WindowingLinked",  "false");
    this->setProperty ("Daddy",            "false");
    
    connect(d->vtkWidget2D,  SIGNAL(mouseEvent(QMouseEvent*)),     this, SLOT(onMousePressEvent(QMouseEvent*)));
    connect(d->vtkWidget3D,  SIGNAL(mouseEvent(QMouseEvent*)),     this, SLOT(onMousePressEvent(QMouseEvent*)));
    connect(d->slider,       SIGNAL(valueChanged(int)),            this, SLOT(onZSliderValueChanged(int)));
    connect(d->dimensionBox, SIGNAL(currentIndexChanged(QString)), this, SLOT(onDimensionBoxChanged(const QString&)));
}

v3dViewPublic::~v3dViewPublic(void)
{
    d->view2D->RemoveChild( d->view3D );

    d->vtkWidget2D->SetRenderWindow (0);
    d->vtkWidget3D->SetRenderWindow (0);

    d->view3D->UninitializeInteractor();
    /*
     d->view2D->SetRenderWindow(0);
     d->view2D->SetRenderWindowInteractor(0);
     d->view3D->SetRenderWindow(0);
     d->view3D->SetRenderWindowInteractor(0);
    */
    
    d->view2D->Delete();
    d->renderer2D->Delete();

    d->view3D->Delete();
    d->renderer3D->Delete();

    d->observer->Delete();

    d->widget->deleteLater();
    
    delete d;
	
    d = NULL;
}

bool v3dViewPublic::registered(void)
{
    return dtkAbstractViewFactory::instance()->registerViewType("v3dViewPublic", createV3dViewPublic);
}

QString v3dViewPublic::description(void) const
{
    return "v3dViewPublic";
}

void v3dViewPublic::onPropertySet(const QString &key, const QString &value)
{
    if(key == "Daddy")
        this->onDaddyPropertySet(value);
    
    if(key == "Orientation")
        this->onOrientationPropertySet(value);
    
    if(key == "ShowScalarBar")
        this->onShowScalarBarPropertySet(value);
    
    if(key == "LookupTable")
        this->onLookupTablePropertySet(value);
    
    if(key == "ShowAxis")
        this->onShowAxisPropertySet(value);
    
    if(key == "ShowRuler")
        this->onShowRulerPropertySet(value);

    if(key == "ShowAnnotations")
        this->onShowAnnotationsPropertySet(value);
    
    if(key == "MouseInteraction")
        this->onMouseInteractionPropertySet(value);
    
    if(key == "3DMode")
        this->on3DModePropertySet(value);
    
    if(key == "Renderer")
        this->onRendererPropertySet(value);

    if(key == "Preset")
        this->onPresetPropertySet(value);
    
    if(key == "Cropping")
        this->onCroppingPropertySet(value);
    
    if(key == "WindowingLinked")
        this->onWindowingLinkedPropertySet(value);
    
    if(key == "PositionLinked")
        this->onPositionLinkedPropertySet(value);
    
    //this->update(); // never update after setting a property, it is not our role
}

void v3dViewPublic::onDaddyPropertySet (const QString &value)
{
    d->anchorButton->blockSignals(true);
    d->linkButton->blockSignals(true);
    d->linkWLButton->blockSignals(true);
    d->registerButton->blockSignals(true);
    
    if (value=="true") {
        d->view2D->SetLinkWindowLevel ( 1 );
		
        d->anchorButton->setChecked (true);
        
        d->linkButton->setChecked (false);
        d->linkWLButton->setChecked (false);
        d->registerButton->setChecked (false);
        d->linkButton->setEnabled(false);
        d->linkWLButton->setEnabled(false);
        d->registerButton->setEnabled(false);
        d->anchorButton->blockSignals(false);
    }
    
    if (value=="false") {
        d->view2D->SetLinkWindowLevel ( 0 );
		
        d->anchorButton->setChecked (false);
        
        d->linkButton->setEnabled(true);
        d->linkWLButton->setEnabled(true);
        d->registerButton->setEnabled(true);
    }
    
    d->anchorButton->blockSignals(false);
    d->linkButton->blockSignals(false);
    d->linkWLButton->blockSignals(false);
    d->registerButton->blockSignals(false);
}

void v3dViewPublic::onPositionLinkedPropertySet (const QString &value)
{
    d->linkButton->blockSignals(true);
    
    if (value=="true") {
        d->linkButton->setChecked (true);
        d->linkButton->blockSignals(false);
    }
    
    if (value=="false") {
        d->linkButton->setChecked (false);
        d->linkButton->blockSignals(false);
    }
}

void v3dViewPublic::onWindowingLinkedPropertySet (const QString &value)
{
    d->linkWLButton->blockSignals(true);
    
    if (value=="true") {
        d->linkWLButton->setChecked (true);
        d->linkWLButton->blockSignals(false);
    }
    
    if (value=="false") {
        d->linkWLButton->setChecked (false);
        d->linkWLButton->blockSignals(false);
    }
}

void v3dViewPublic::onOrientationPropertySet(const QString &value)
{
    if (value==d->orientation)
        return;
    
    double pos[3], window = 0.0, level = 0.0;
    int volumeIndex = 0;
    if( d->currentView ) {
        d->currentView->GetCurrentPoint (pos);
        window = d->currentView->GetWindow();
        level  = d->currentView->GetLevel();
        volumeIndex = d->currentView->GetVolumeIndex();
    }
    
    if (value=="3D") {
        d->orientation = "3D";
        d->currentView = d->view3D;
        //d->stackedLayout->setCurrentIndex (1);
	d->stackedWidget->setCurrentIndex (1);
    }

    // in case the max range becomes smaller than the actual value, a signal is emitted and
    // we don't want it
    d->slider->blockSignals (true);
    
    if (value == "Axial") {
        d->orientation = "Axial";
        d->currentView = d->view2D;
        d->view2D->SetOrientation (vtkViewImage2D::AXIAL_ID);
        //d->stackedLayout->setCurrentIndex (0);
	d->stackedWidget->setCurrentIndex (0);
    }
	
    if (value == "Sagittal") {
        d->orientation = "Sagittal";
        d->currentView = d->view2D;
        d->view2D->SetOrientation (vtkViewImage2D::SAGITTAL_ID);
        //d->stackedLayout->setCurrentIndex (0);
	d->stackedWidget->setCurrentIndex (0);
    }
    
    if (value == "Coronal") {
        d->orientation = "Coronal";
        d->currentView = d->view2D;
        d->view2D->SetOrientation (vtkViewImage2D::CORONAL_ID);
        //d->stackedLayout->setCurrentIndex (0);
	d->stackedWidget->setCurrentIndex (0);
    }

    if (d->dimensionBox->currentIndex()==0) {
        d->slider->setRange (0, d->view2D->GetWholeZMax());
    }
    else if (d->dimensionBox->currentIndex()==1 && d->imageData) {
        d->slider->setRange(0, d->imageData->tDimension()-1);
    }
    
    if (!d->currentView) {
        d->slider->blockSignals (false);
        return;
    }
        
    d->currentView->SetCurrentPoint (pos);
    d->currentView->SetWindow       (window);
    d->currentView->SetLevel        (level);
    d->currentView->SetVolumeIndex  (volumeIndex);
    
    
    // update slider position
    if (vtkViewImage2D *view2d = vtkViewImage2D::SafeDownCast (d->currentView)) {
        unsigned int zslice = view2d->GetZSlice();
        d->slider->setValue (zslice);
    }
    else if (d->dimensionBox->currentIndex()==1) {
        d->slider->setValue(d->currentView->GetVolumeIndex());
    }
    
    d->slider->blockSignals (false);
}

void v3dViewPublic::on3DModePropertySet (const QString &value)
{
    if (value=="VR") {
        d->view3D->SetVRMapperTypeToTexture();
        d->view3D->SetRenderingModeToVR();
        d->view3D->SetVolumeRayCastFunctionToComposite();
    }
    
    if (value=="MPR") {
        d->view3D->SetRenderingModeToPlanar();
        d->view3D->ShowAxialOn();
        d->view3D->ShowSagittalOn();
        d->view3D->ShowCoronalOn();
    }
    
    if (value=="MIP - Maximum") {
        d->view3D->SetRenderingModeToVR();
        d->view3D->SetVolumeRayCastFunctionToMIP();
    }
    
    if (value=="Off") {
        d->view3D->SetRenderingModeToPlanar();
        d->view3D->ShowAxialOff();
        d->view3D->ShowSagittalOff();
        d->view3D->ShowCoronalOff();
    } 
}

void v3dViewPublic::onRendererPropertySet (const QString &value)
{
    if (value=="GPU") {
        d->view3D->SetVRMapperTypeToGPU();
        d->view3D->SetRenderingModeToVR();
//        d->view3D->SetVolumeRayCastFunctionToComposite();
    }

    if (value=="Texture") {
        d->view3D->SetVRMapperTypeToTexture();
        d->view3D->SetRenderingModeToVR();
//        d->view3D->SetVolumeRayCastFunctionToComposite();
    }
}

void v3dViewPublic::onShowScalarBarPropertySet(const QString &value)
{
    if (value == "true") {
        d->view2D->SetScalarBarVisibility(true);
        d->view3D->SetScalarBarVisibility(true);
    }
    
    if (value == "false") {
        d->view2D->SetScalarBarVisibility(false);
        d->view3D->SetScalarBarVisibility(false);
    }
}

void v3dViewPublic::onLookupTablePropertySet(const QString &value)
{
  vtkLookupTable *lut = vtkLookupTableManager::GetLookupTable ( value.toAscii().constData() );
  d->view2D->SyncSetLookupTable( lut );
  lut->Delete();
}

void v3dViewPublic::onShowAxisPropertySet(const QString &value)
{
    if (value == "true")
    	d->view2D->SetShow2DAxis(1);
    
    if (value == "false")
        d->view2D->SetShow2DAxis(0);
}

void v3dViewPublic::onShowRulerPropertySet(const QString &value)
{
    d->view2D->SetRulerWidgetVisibility ((value == "true"));  
}

void v3dViewPublic::onShowAnnotationsPropertySet(const QString &value)
{
    d->view2D->SetShowAnnotations ((value == "true"));
    d->view3D->SetShowAnnotations ((value == "true"));
}

void v3dViewPublic::onMouseInteractionPropertySet(const QString &value)
{
    d->view2D->SetMiddleButtonInteractionStyle(vtkViewImage2D::SELECT_INTERACTION);
    
    if (value == "Zooming") {
        d->view2D->SetLeftButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
        d->view2D->SetMiddleButtonInteractionStyle(vtkViewImage2D::ZOOM_INTERACTION);
    }
    
    if (value == "Windowing")
        d->view2D->SetLeftButtonInteractionStyle(vtkViewImage2D::WINDOW_LEVEL_INTERACTION);
    
    if (value == "Slicing")
        d->view2D->SetLeftButtonInteractionStyle(vtkViewImage2D::SELECT_INTERACTION);

    if (value == "Measuring")
        d->view2D->DistanceWidgetVisibilityOn();
    else
        d->view2D->DistanceWidgetVisibilityOff();
}

void v3dViewPublic::onPresetPropertySet (const QString &value)
{
    if( value == "VR Muscles&Bones" ) {
        
        this->setProperty ("LookupTable", "Muscles & Bones");
        
        // double color[3] = {0.0, 0.0, 0.0};	
        // d->view2D->SyncSetBackground( color );
        d->view2D->SyncSetWindow (337.0);
        d->view2D->SyncSetLevel (1237.0);
    }
    
    if( value == "Vascular I" ) {
        
        this->setProperty ("LookupTable", "Stern");
        
        // double color[3] = {0.0, 0.0, 0.0};
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (388.8);
        d->view2D->SyncSetLevel (362.9);
    }
    
    if( value == "Vascular II" ) {
        
        this->setProperty ("LookupTable", "Red Vessels");
        
        // double color[3] = {0.0, 0.0, 0.0};      
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (189.6);
        d->view2D->SyncSetLevel (262.3);
    }
    
    if( value == "Vascular III" ) {
        
        this->setProperty ("LookupTable", "Red Vessels");
        
        // double color[3] = {0.0, 0.0, 0.0};
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (284.4);
        d->view2D->SyncSetLevel (341.7);
    }
    
    if( value == "Vascular IV" ) {
        
        this->setProperty ("LookupTable", "Red Vessels");
        
        // double color[3] = {0.0, 0.0, 0.0};
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (272.5);
        d->view2D->SyncSetLevel (310.9);
    }
    
    if( value == "Standard" ) {
        
        this->setProperty ("LookupTable", "Muscles & Bones");
        
        // double color[3] = {0.0, 0.0, 0.0};
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (243.7);
        d->view2D->SyncSetLevel (199.6);
    }
    
    if( value == "Soft" ) {
        
        this->setProperty ("LookupTable", "Bones");
        
        // double color[3] = {0.0, 0.0, 0.0};      
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (133.5);
        d->view2D->SyncSetLevel (163.4);
    }
    
    if( value == "Soft on White" ) {
        
        this->setProperty ("LookupTable", "Muscles & Bones");
        
        // double color[3] = {1.0,0.98820477724075317,0.98814374208450317};      
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (449.3);
        d->view2D->SyncSetLevel (372.8);
    }
    
    if( value == "Soft on Blue" ) {
        
        this->setProperty ("LookupTable", "Muscles & Bones");
        
        // double color[3]={0.0, 0.27507439255714417, 0.26398107409477234};      
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (449.3);
        d->view2D->SyncSetLevel (372.8);
    }
    
    if( value == "Red on White" ) {
        
        this->setProperty ("LookupTable", "Red Vessels");
        
        // double color[3]={1.0, 0.98820477724075317, 0.98814374208450317};	
        // d->collection->SyncSetBackground( color );
        
        d->view2D->SyncSetWindow (449.3);
        d->view2D->SyncSetLevel (372.8);
    }
    
    if( value == "Glossy" ) {
        
        this->setProperty ("LookupTable", "Bones");
        
        //double color[3] = {0.0, 0.0, 0.0};      
        //d->collection->SyncSetBackground( color );
        d->view2D->SyncSetWindow (133.5);
        d->view2D->SyncSetLevel (163.4);
    }
}

void v3dViewPublic::onCroppingPropertySet (const QString &value)
{
    if ( value=="true" ) {
        if (d->view3D->GetBoxWidget()->GetInteractor()) { // avoid VTK warnings
            d->view3D->SetCropping(1);
            d->view3D->SetBoxWidgetVisibility ( 1 );
        }
    }
    else {
        if (d->view3D->GetBoxWidget()->GetInteractor()) {
            d->view3D->SetCropping (0);
            d->view3D->SetBoxWidgetVisibility ( 0 );
        }
    }
}

void v3dViewPublic::reset(void)
{
    d->view2D->Reset();
    d->view3D->Reset();

    int linkWindowing = d->view2D->GetLinkWindowLevel();
    if (linkWindowing)
    {
      d->view2D->SetLinkWindowLevel (0);
      d->view2D->SyncResetWindowLevel();
      d->view2D->SetLinkWindowLevel (linkWindowing);
    }
        
    int linkPosition = d->view2D->GetLinkPosition();
    if (linkPosition)
    {
      d->view2D->SetLinkPosition (0);
      d->view2D->SyncResetCurrentPoint();
      d->view2D->SetLinkPosition (linkPosition);
    }

    int linkZoom = d->view2D->GetLinkZoom();
    if (linkZoom)
    {
      d->view2D->SetLinkZoom (0);
      d->view2D->SyncResetZoom();
      d->view2D->SetLinkZoom (linkZoom);
    }
    
    int zslice = d->view2D->GetZSlice();
    
    d->slider->blockSignals ( true );
    d->slider->setValue ( zslice );
    d->slider->blockSignals ( false );
}

void v3dViewPublic::update(void)
{
    if( d->currentView )
        d->currentView->Render();
    d->widget->update();
}

void v3dViewPublic::link(dtkAbstractView *other)
{
    if(!other || other->description()!=tr("v3dViewPublic") || d->linkedViews.contains (other) || other==this)
        return;
	
    d->linkedViews.append (other);
	
    if (v3dViewPublic *otherView = dynamic_cast<v3dViewPublic*>(other)) {
        
        //otherView->setProperty ("Linked", "true");

      if (d->lastLinked)
	  d->lastLinked->AddChild ( otherView->view2D() );
      else
          d->view2D->AddChild ( otherView->view2D() );
        
        otherView->view2D()->AddChild ( d->view2D );
        d->lastLinked = otherView->view2D();

	/*
        d->view2D->SetLinkPosition (1);
        d->view2D->SetLinkZoom (1);
        d->view2D->SetLinkCameraFocalAndPosition (1);
        d->view2D->SetLinkWindowLevel (1);
        d->view2D->SetLinkVolumeIndex (1);

	d->view3D->SetLinkPosition (1);
        d->view3D->SetLinkZoom (1);
        d->view3D->SetLinkCameraFocalAndPosition (1);
        d->view3D->SetLinkWindowLevel (1);
        d->view3D->SetLinkVolumeIndex (1);
	*/
        
        this->setProperty ("PositionLinked",  "true");
        this->setProperty ("CameraLinked",    "true");
        this->setProperty ("WindowingLinked", "true");
	
    }
}

void v3dViewPublic::unlink(dtkAbstractView *other)
{
    if(!other || other->description()!=tr("v3dViewPublic") || !d->linkedViews.contains (other) ||  other==this)
        return;
    
    d->linkedViews.removeOne (other);
    
    if (v3dViewPublic *otherView = dynamic_cast<v3dViewPublic*>(other)) {
        
        otherView->view2D()->RemoveChild( otherView->view3D() );
        otherView->view2D()->Detach();
        otherView->view2D()->AddChild( otherView->view3D() );
		
        if (d->lastLinked==otherView->view2D()) {
            if (d->linkedViews.count())
                d->lastLinked = dynamic_cast<v3dViewPublic *>( d->linkedViews.last() )->view2D();
        }
    }
	
	if (d->linkedViews.count()==0) {
		d->lastLinked = 0;
		
		d->view2D->SetLinkPosition (0);
		d->view2D->SetLinkZoom (0);
		d->view2D->SetLinkCameraFocalAndPosition (0);
		d->view2D->SetLinkWindowLevel (0);
		d->view2D->SetLinkVolumeIndex (0);

		d->view3D->SetLinkPosition (0);
		d->view3D->SetLinkZoom (0);
		d->view3D->SetLinkCameraFocalAndPosition (0);
		d->view3D->SetLinkWindowLevel (0);
		d->view3D->SetLinkVolumeIndex (0);
		
		this->setProperty ("PositionLinked",  "false");
		this->setProperty ("CameraLinked",    "false");
		this->setProperty ("WindowingLinked", "false");
	}
}

void *v3dViewPublic::view(void)
{
    return d->currentView;
}

vtkViewImage2D *v3dViewPublic::view2D(void)
{
    return d->view2D;
}

vtkViewImage3D *v3dViewPublic::view3D(void)
{
    return d->view3D;
}

vtkRenderer *v3dViewPublic::renderer2D(void)
{
    return d->renderer2D;
}

vtkRenderer *v3dViewPublic::renderer3D(void)
{
    return d->renderer3D;
}

vtkRenderWindowInteractor *v3dViewPublic::interactor2D(void)
{
    return d->vtkWidget2D->GetRenderWindow()->GetInteractor();
}

vtkRenderWindowInteractor *v3dViewPublic::interactor3D(void)
{
    return d->vtkWidget3D->GetRenderWindow()->GetInteractor();
}


void v3dViewPublic::setData(dtkAbstractData *data)
{
    if(!data)
        return;
    
    if (data->hasMetaData("PatientName")){
        const QString patientName = data->metaDataValues(tr("PatientName"))[0];
        d->view2D->SetPatientNameData( patientName.toAscii().constData() );
        d->view3D->SetPatientNameData( patientName.toAscii().constData() );
    }
    
    
    if( data->hasMetaData("StudyDescription")){
        const QString studyName = data->metaDataValues(tr("StudyDescription"))[0];
        d->view2D->SetStudyNameData( studyName.toAscii().constData() );
        d->view3D->SetStudyNameData( studyName.toAscii().constData() );
    }
    
    if (data->hasMetaData("SeriesDescription")){
        const QString seriesName = data->metaDataValues(tr("SeriesDescription"))[0];
        d->view2D->SetSerieNameData( seriesName.toAscii().constData() );
        d->view3D->SetSerieNameData( seriesName.toAscii().constData() );
    }
	
#ifdef vtkINRIA3D_USE_ITK
    if (data->description()=="itkDataImageChar3") {
        if( itk::Image<char, 3>* image = dynamic_cast<itk::Image<char, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageUChar3") {
        if( itk::Image<unsigned char, 3>* image = dynamic_cast<itk::Image<unsigned char, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageShort3") {
        if( itk::Image<short, 3>* image = dynamic_cast<itk::Image<short, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageShort4") {
        if( itk::Image<short, 4>* image = dynamic_cast<itk::Image<short, 4>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage4(image);
            d->view3D->SetITKImage4(image);
        }
    }    
    else if (data->description()=="itkDataImageUShort3") {
        if( itk::Image<unsigned short, 3>* image = dynamic_cast<itk::Image<unsigned short, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageUShort4") {
        if( itk::Image<unsigned short, 4>* image = dynamic_cast<itk::Image<unsigned short, 4>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage4(image);
            d->view3D->SetITKImage4(image);
        }
    }    
    else if (data->description()=="itkDataImageInt3") {
        if( itk::Image<int, 3>* image = dynamic_cast<itk::Image<int, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageInt4") {
        if( itk::Image<int, 4>* image = dynamic_cast<itk::Image<int, 4>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage4(image);
            d->view3D->SetITKImage4(image);
        }
    }
    else if (data->description()=="itkDataImageUInt3") {
        if( itk::Image<unsigned int, 3>* image = dynamic_cast<itk::Image<unsigned int, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageLong3") {
        if( itk::Image<long, 3>* image = dynamic_cast<itk::Image<long, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageULong3") {
        if( itk::Image<unsigned long, 3>* image = dynamic_cast<itk::Image<unsigned long, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageFloat3") {
        if( itk::Image<float, 3>* image = dynamic_cast<itk::Image<float, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageFloat4") {
        if( itk::Image<float, 4>* image = dynamic_cast<itk::Image<float, 4>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage4(image);
            d->view3D->SetITKImage4(image);
        }
    }    
    else if (data->description()=="itkDataImageDouble3") {
        if( itk::Image<double, 3>* image = dynamic_cast<itk::Image<double, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageRGB3") {
        if( itk::Image<itk::RGBPixel<unsigned char>, 3> *image = dynamic_cast<itk::Image<itk::RGBPixel<unsigned char>, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
    else if (data->description()=="itkDataImageVector3") {
        if( itk::Image<itk::Vector<unsigned char, 3>, 3> *image = dynamic_cast<itk::Image<itk::Vector<unsigned char, 3>, 3>*>( (itk::Object*)( data->data() ) ) ) {
            d->view2D->SetITKImage(image);
            d->view3D->SetITKImage(image);
        }
    }
		else if (data->description()=="vistalDataImageUChar3") {
			if( itk::Image<unsigned char, 3> *image = dynamic_cast<itk::Image<unsigned char, 3> *>( (itk::Object*)( data->convert("itkDataImageUChar3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageChar3") {
			if( itk::Image<char, 3> *image = dynamic_cast<itk::Image<char, 3> *>( (itk::Object*)( data->convert("itkDataImageChar3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageUShort3") {
			if( itk::Image<unsigned short, 3> *image = dynamic_cast<itk::Image<unsigned short, 3> *>( (itk::Object*)( data->convert("itkDataImageUShort3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageShort3") {
			if( itk::Image<short, 3> *image = dynamic_cast<itk::Image<short, 3> *>( (itk::Object*)( data->convert("itkDataImageShort3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageUInt3") {
			if( itk::Image<unsigned int, 3> *image = dynamic_cast<itk::Image<unsigned int, 3> *>( (itk::Object*)( data->convert("itkDataImageUInt3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageInt3") {
			if( itk::Image<int, 3> *image = dynamic_cast<itk::Image<int, 3> *>( (itk::Object*)( data->convert("itkDataImageInt3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageFloat3") {
			if( itk::Image<float, 3> *image = dynamic_cast<itk::Image<float, 3> *>( (itk::Object*)( data->convert("itkDataImageFloat3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
		else if (data->description()=="vistalDataImageDouble3") {
			if( itk::Image<double, 3> *image = dynamic_cast<itk::Image<double, 3> *>( (itk::Object*)( data->convert("itkDataImageDouble3")->data() ) ) ) {
				d->view2D->SetITKImage(image);
				d->view3D->SetITKImage(image);
			}
		}
    else
#endif
    if (data->description()=="v3dDataImage") {
        if(vtkImageData *dataset = dynamic_cast<vtkImageData*>((vtkDataObject *)(data->data()))) {
            d->view2D->SetImage(dataset);
            d->view3D->SetImage(dataset);
        }
    }
    else if ( data->description() == "vtkDataMesh" ) {
            
        this->enableInteractor ( "v3dViewMeshInteractor" );
	// This will add the data to the interactor.
	dtkAbstractView::setData(data);
    }
    else if ( data->description() == "v3dDataFibers" ) {
      
        this->enableInteractor ( "v3dViewFiberInteractor" );
	// This will add the data to the interactor.
	dtkAbstractView::setData(data);
    }
    else {
        dtkAbstractView::setData(data);
        return;
    }
    
    d->data = data;
    d->imageData = dynamic_cast<dtkAbstractDataImage*> (data);
        
    if(d->imageData) {
        d->slider->blockSignals (true);
        if (d->dimensionBox->currentIndex()==0) {
            if( d->orientation=="Axial")
                d->slider->setRange(0, d->view2D->GetWholeZMax());
            else if( d->orientation=="Sagittal")
                d->slider->setRange(0, d->view2D->GetWholeZMax());
            else if( d->orientation=="Coronal")
                d->slider->setRange(0, d->view2D->GetWholeZMax());
        }
        else if (d->dimensionBox->currentIndex()==1)
            d->slider->setRange(0, d->imageData->tDimension()-1);

        d->slider->blockSignals (false);
    }
    
    // this->update(); // update is not the role of the plugin, but of the app
}

void *v3dViewPublic::data (void)
{
    return d->data;
}

QList<dtkAbstractView *> v3dViewPublic::linkedViews (void)
{
    return d->linkedViews;
}

QWidget *v3dViewPublic::widget(void)
{
    return d->widget;
}

void v3dViewPublic::onPlayButtonClicked(bool start)
{
    d->timeline->setFrameRange(d->slider->minimum(), d->slider->maximum() );
	
    if(start)
		d->timeline->start();
	else
		d->timeline->stop();
}

void v3dViewPublic::onDimensionBoxChanged (const QString &value)
{
    if (d->imageData) {
        
        d->slider->blockSignals (true);
        if (value=="Slice") {
            d->observer->unlock();
	    d->slider->setRange(0, d->view2D->GetWholeZMax());
            if (vtkViewImage2D *view2d = vtkViewImage2D::SafeDownCast (d->currentView)) {
                unsigned int zslice = view2d->GetZSlice();
                d->slider->setValue (zslice);
            }
        }
        else if (value=="Volume") {
            d->observer->lock();
            d->slider->setRange(0, d->imageData->tDimension()-1);
            if (d->currentView) {
                unsigned int volumeIndex = d->currentView->GetVolumeIndex();
                d->slider->setValue (volumeIndex);
            }
        }
        d->slider->blockSignals (false);
        d->timeline->setFrameRange(d->slider->minimum(), d->slider->maximum() );
    }
}

void v3dViewPublic::linkPosition (dtkAbstractView *view, bool value)
{
    if (v3dViewPublic *vview = dynamic_cast<v3dViewPublic*>(view)) {
        if (value) {
            vview->setProperty ("PositionLinked", "true");
            vview->setProperty ("CameraLinked",   "true");
	    
	    d->view2D->SetLinkPosition (1);
	    d->view2D->SetLinkZoom (1);
	    d->view2D->SetLinkCameraFocalAndPosition (1);
	    d->view2D->SetLinkVolumeIndex (1);
	    
	    d->view3D->SetLinkPosition (1);
	    d->view3D->SetLinkZoom (1);
	    d->view3D->SetLinkCameraFocalAndPosition (1);
	    d->view3D->SetLinkVolumeIndex (1);
            
            vview->view2D()->SetLinkPosition ( 1 );
            vview->view2D()->SetLinkZoom ( 1 );
            vview->view2D()->SetLinkCameraFocalAndPosition (1);
            vview->view2D()->SetLinkVolumeIndex (1);

	    vview->view3D()->SetLinkPosition ( 1 );
            vview->view3D()->SetLinkZoom ( 1 );
            vview->view3D()->SetLinkCameraFocalAndPosition (1);
            vview->view3D()->SetLinkVolumeIndex (1);		  
            
            vview->view2D()->SetCurrentPoint    ( d->currentView->GetCurrentPoint() );
            vview->view3D()->SetCurrentPoint       ( d->currentView->GetCurrentPoint() );
            
            vview->view2D()->SetZoom    ( d->view2D->GetZoom() );
            vview->view3D()->SetZoom    ( d->view3D->GetZoom() );
            if (vview->view2D()->GetOrientation()==d->view2D->GetOrientation()) {
                double pos[3], focal[3];
                d->view2D->GetCameraFocalAndPosition(pos, focal);		  			  
                vview->view2D()->SetCameraFocalAndPosition    ( pos, focal );
            }
        }
        else {
            vview->setProperty ("PositionLinked", "false");
            vview->setProperty ("CameraLinked",   "false");
            vview->view2D()->SetLinkPosition ( 0 );
            vview->view2D()->SetLinkZoom ( 0 );
            vview->view2D()->SetLinkCameraFocalAndPosition (0);
            vview->view2D()->SetLinkVolumeIndex (0);

	    vview->view3D()->SetLinkPosition ( 0 );
            vview->view3D()->SetLinkZoom ( 0 );
            vview->view3D()->SetLinkCameraFocalAndPosition (0);
            vview->view3D()->SetLinkVolumeIndex (0);
        }
    }
}

void v3dViewPublic::linkCamera (dtkAbstractView *view, bool value)
{
    this->linkPosition (view, value);
}

void v3dViewPublic::linkWindowing (dtkAbstractView *view, bool value)
{
    if (v3dViewPublic *vview = dynamic_cast<v3dViewPublic*>(view)) {
        if (value) {
            vview->setProperty ("WindowingLinked", "true");

	    d->view2D->SetLinkWindowLevel (1);
	    d->view3D->SetLinkWindowLevel (1);
	    
            vview->view2D()->SetLinkWindowLevel ( 1 );
	    vview->view3D()->SetLinkWindowLevel ( 1 );
            
            vview->view2D()->SetWindow    ( d->currentView->GetWindow() );
            vview->view3D()->SetWindow       ( d->currentView->GetWindow() );
            
            vview->view2D()->SetLevel    ( d->currentView->GetLevel() );
            vview->view3D()->SetLevel       ( d->currentView->GetLevel() );
        }
        else {
            vview->setProperty ("WindowingLinked", "false");
            vview->view2D()->SetLinkWindowLevel ( 0 );
	    vview->view3D()->SetLinkWindowLevel ( 0 );
        }
    }
}

void v3dViewPublic::onMousePressEvent(QMouseEvent *event)
{
    if(event->button() == Qt::RightButton) {
        d->menu->popup (event->globalPos());
    }
}

void v3dViewPublic::onZSliderValueChanged (int value)
{
    if (!d->currentView)
        return;
    
    if (d->dimensionBox->currentIndex()==0) {
        if( vtkViewImage2D *view = vtkViewImage2D::SafeDownCast(d->currentView) ) {
            d->observer->lock();
            view->SetZSlice (value);
            if (view->GetLinkCameraFocalAndPosition())
                view->SyncSetZSlice (value);
            d->observer->unlock();
        }
    }
    else if (d->dimensionBox->currentIndex()==1) {
        if( d->currentView ) {
            d->currentView->SetVolumeIndex (value);
            if (d->currentView->GetLinkVolumeIndex())
                d->currentView->SyncSetVolumeIndex (value);
        }
    }
    
    //qApp->processEvents();
    d->currentView->Render();
}

void v3dViewPublic::switchToAxial(void)
{
    this->setProperty ("Orientation", "Axial");
}

void v3dViewPublic::switchToSagittal(void)
{
    this->setProperty ("Orientation", "Sagittal");
}

void v3dViewPublic::switchToCoronal(void)
{
    this->setProperty ("Orientation", "Coronal");
}

void v3dViewPublic::switchToVR(void)
{
    this->setProperty ("3DMode",      "VR");
    this->setProperty ("Orientation", "3D");
}

void v3dViewPublic::switchToVRGPU(void)
{
    this->setProperty ("Renderer",      "GPU");
    this->setProperty ("Orientation", "3D");
}

void v3dViewPublic::switchToMPR(void)
{
    this->setProperty ("3DMode",      "MPR");
    this->setProperty ("Orientation", "3D");
}

void v3dViewPublic::onMenuZoomTriggered (void)
{
    this->setProperty ("MouseInteraction", "Zooming");
}

void v3dViewPublic::onMenuWindowLevelTriggered (void)
{
    this->setProperty ("MouseInteraction", "Windowing");
}

void v3dViewPublic::close(void)
{
    d->widget->close();
    medAbstractView::close();
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractView *createV3dViewPublic(void)
{
    return new v3dViewPublic;
}
