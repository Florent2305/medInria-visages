// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalDataImageWriter.h"

#include "Image3D.hh"
#include "GIS.hh"
#include "vistalIO.h"

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractDataFactory.h>

// /////////////////////////////////////////////////////////////////
// vistalDataImageWriterPrivate
// /////////////////////////////////////////////////////////////////

class vistalDataImageWriterPrivate
{
    public:
};

// /////////////////////////////////////////////////////////////////
// vistalDataImageWriter
// /////////////////////////////////////////////////////////////////

vistalDataImageWriter::vistalDataImageWriter(void) :
    dtkAbstractDataWriter(), d(new vistalDataImageWriterPrivate)
{

}

vistalDataImageWriter::~vistalDataImageWriter(void)
{

}

bool
vistalDataImageWriter::registered(void)
{

    return dtkAbstractDataFactory::instance()->registerDataWriterType("vistalDataImageWriter", QStringList() << "vistalDataImageUChar3" << "vistalDataImageChar3" << "vistalDataImageUShort3"
            << "vistalDataImageShort3" << "vistalDataImageUInt3" << "vistalDataImageInt3" << "vistalDataImageFloat3" << "vistalDataImageDouble3", createVistalDataImageWriter);

}

QString
vistalDataImageWriter::description(void) const
{
    return "vistalDataImageWriter";
}

QString
vistalDataImageWriter::identifier(void) const
{
    return "vistalDataImageWriter";
}

QStringList
vistalDataImageWriter::handled() const
{
    return QStringList() << "vistalDataImageUChar3" << "vistalDataImageChar3" << "vistalDataImageUShort3" << "vistalDataImageShort3" << "vistalDataImageUInt3" << "vistalDataImageInt3"
            << "vistalDataImageFloat3" << "vistalDataImageDouble3";
}

bool
vistalDataImageWriter::canWrite(const QString & path)
{
    //  qDebug() << "Can write?: " << QFile(path).isWritable();
    //    return true;

    return ((QFileInfo(path).suffix() == "dim") || (QFileInfo(path).suffix() == "ima"));
}

bool
vistalDataImageWriter::write(const QString & path)
{
    if (!this->data())
        return false;

    if (dtkAbstractData *dtkdata = this->data() ) {

        if (dtkdata->description() == "vistalDataImageUChar3") {
            vistal::Image3D<unsigned char> * image = static_cast<vistal::Image3D<unsigned char>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageChar3") {
            vistal::Image3D<char> * image = static_cast<vistal::Image3D<char>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageUShort3") {
            vistal::Image3D<unsigned short> * image = static_cast<vistal::Image3D<unsigned short>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageShort3") {
            vistal::Image3D<short> * image = static_cast<vistal::Image3D<short>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageUInt3") {
            vistal::Image3D<unsigned int> * image = static_cast<vistal::Image3D<unsigned int>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageInt3") {
            vistal::Image3D<int> * image = static_cast<vistal::Image3D<int>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageFloat3") {
            vistal::Image3D<float> * image = static_cast<vistal::Image3D<float>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }
        else if (dtkdata->description() == "vistalDataImageDouble3") {
            vistal::Image3D<double> * image = static_cast<vistal::Image3D<double>*> (dtkdata->data());
            if (image == NULL)
                return false;
            std::string tmp(path.toAscii().data());
            vistal::io::writeImage(tmp, *image);
        }

        else {
            qWarning() << "Unrecognized pixel type";
            return false;
        }
    }
    return true;
}

// /////////////////////////////////////////////////////////////////
// Type instanciation
// /////////////////////////////////////////////////////////////////

dtkAbstractDataWriter *
createVistalDataImageWriter(void)
{
    return new vistalDataImageWriter;
}
