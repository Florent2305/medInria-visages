// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#pragma once

#include <medRegistrationAbstractToolBox.h>
#include "animaDenseBMRegistrationPluginExport.h"

class animaDenseBMRegistrationToolBoxPrivate;

class ANIMADENSEBMREGISTRATIONPLUGIN_EXPORT animaDenseBMRegistrationToolBox : public medRegistrationAbstractToolBox
{
    Q_OBJECT
    MED_TOOLBOX_INTERFACE("Dense Anatomical BM Registration",
                          "Dense non linear block-matching registration",
                           << "registration")

public:
    animaDenseBMRegistrationToolBox(QWidget *parent = 0);
    ~animaDenseBMRegistrationToolBox(void);

    int blockSize();
    unsigned int blockSpacing();
    float stDevThreshold();
    unsigned int transform();
    unsigned int metric();
    unsigned int optimizer();
    unsigned int maximumIterations();
    float minimalTransformError();
    unsigned int optimizerMaximumIterations();
    double searchRadius();
    double searchAngleRadius();
    double searchSkewRadius();
    double searchScaleRadius();
    double finalRadius();
    double stepSize();
    double translateUpperBound();
    double angleUpperBound();
    double skewUpperBound();
    double scaleUpperBound();
    unsigned int agregator();
    double extrapolationSigma();
    double elasticSigma();
    double outlierSigma();
    double mEstimateConvergenceThreshold();
    double neighborhoodApproximation();
    bool useTransformationDam();
    double damDistance();
    unsigned int numberOfPyramidLevels();
    unsigned int lastPyramidLevel();
    double percentageKept();
    int numberOfThreads();
    
public:
    static bool registered(void);
    
public slots:
    void updateBMOptimizerParams(int);
    void updateBMTransformParams(int);
    void updateBMAgregatorParams(int);
    void updateDamUsage(int);
    
private:
    animaDenseBMRegistrationToolBoxPrivate *d;
};
