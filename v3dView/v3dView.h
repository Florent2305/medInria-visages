// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#ifndef V3DVIEW_H
#define V3DVIEW_H

#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractView.h>
#include <medCore/medAbstractView.h>

#include "v3dViewPluginExport.h"

class QMouseEvent;

class v3dViewPrivate;
class v3dViewObserver;
class vtkImageView;
class vtkImageView2D;
class vtkImageView3D;
class vtkRenderer;
class vtkRenderWindowInteractor;

class V3DVIEWPLUGIN_EXPORT v3dView : public medAbstractView
{
    Q_OBJECT

public:
             v3dView(void);
    virtual ~v3dView(void);

    virtual QString description(void) const;

    static bool registered(void);

public:
    void reset(void);
    void clear(void);
    void update(void);

    void *view(void);

    void setData(dtkAbstractData *data);
    void *data (void);

    QWidget *receiverWidget(void);
    QWidget *widget(void);
    
    void close(void);

    // access method to internal members for v3dView**Interactor classes
    vtkImageView2D *view2d(void);
    vtkImageView3D *view3d(void);
    
    vtkImageView *currentView(void);
    
    vtkRenderWindowInteractor *interactor(void);
    
    vtkRenderer *renderer2d(void);
    vtkRenderer *renderer3d(void);

    virtual QStringList getAvailableTransferFunctionPresets();
    virtual void getTransferFunctions( QList<double> & scalars,
				       QList<QColor> & colors );
    virtual void setTransferFunctions( QList<double> scalars,
				       QList<QColor > colors );
    virtual void setColorLookupTable( QList< double > scalars,
				      QList< QColor > colors );

public slots:
    void play          (bool value);
    
    void onPositionChanged (const QVector3D &position);
    void onZoomChanged (double zoom);
    void onPanChanged (const QVector2D &pan);
    void onWindowingChanged (double level, double window);
    void onCameraChanged (const QVector3D &position, const QVector3D &viewup, const QVector3D &focal, double parallelScale);
    
    // void linkwl (dtkAbstractView* view, bool);
    
public slots:
    void onPropertySet         (const QString &key, const QString &value);
    void onOrientationPropertySet           (const QString &value);
    void on3DModePropertySet                (const QString &value);
    void onRendererPropertySet              (const QString &value);
    void onUseLODPropertySet                (const QString &value);
    void onPresetPropertySet                (const QString &value);
    void onShowScalarBarPropertySet         (const QString &value);
    void onLookupTablePropertySet           (const QString &value);
    void onShowAxisPropertySet              (const QString &value);
    void onShowRulerPropertySet             (const QString &value);
    void onShowAnnotationsPropertySet       (const QString &value);
    void onMouseInteractionPropertySet      (const QString &value);
    void onCroppingPropertySet              (const QString &value);
    void onDaddyPropertySet                 (const QString &value);
    void onPositionLinkedPropertySet        (const QString &value);
    void onWindowingLinkedPropertySet       (const QString &value);

public slots:
    void onMousePressEvent                  (QMouseEvent *event);
    void onZSliderValueChanged                  (int value);
    void onDimensionBoxChanged              (const QString &value);
    void onMetaDataSet         (const QString &key, const QString &value);

public slots: // Menu interface
    void onMenuAxialTriggered               (void);
    void onMenuSagittalTriggered            (void);
    void onMenuCoronalTriggered             (void);
    void onMenu3DVRTriggered                (void);
    void onMenu3DMaxIPTriggered             (void);
    void onMenu3DMinIPTriggered             (void);
    void onMenu3DMPRTriggered               (void);
    void onMenu3DOffTriggered               (void);
    void onMenuVRGPUTriggered               (void);
    void onMenuVRRayCastAndTextureTriggered (void);
    void onMenuVRRayCastTriggered           (void);
    void onMenuVRDefaultTriggered           (void);
    void onMenu3DLODTriggered               (void);
    void onMenuZoomTriggered                (void);
    void onMenuWindowLevelTriggered         (void);

public:
    void  enableInteraction(void);
    void disableInteraction(void);
    void bounds(float& xmin, float& xmax, float& ymin, float& ymax, float& zmin, float& zmax);
    void cameraUp(double *coordinates);
    void cameraPosition(double *coordinates);
    void cameraFocalPoint(double *coordinates);
    void setCameraPosition(double x, double y, double z);
    void setCameraClippingRange(double nearRange, double farRange);

    QString cameraProjectionMode(void);
    double cameraViewAngle(void);
    double cameraZoom(void);

private:
    v3dViewPrivate *d;
    
    friend class v3dViewObserver;
};

dtkAbstractView *createV3dView(void);

#endif
