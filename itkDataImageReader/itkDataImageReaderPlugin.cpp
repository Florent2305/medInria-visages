// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

//#include "itkDataImageReader.h"
#ifdef ITK_USE_SYSTEM_GDCM
#include "itkGDCMDataImageReader.h"
#endif
#include "itkMetaDataImageReader.h"
#include "itkAnalyzeDataImageReader.h"
#include "itkPNGDataImageReader.h"
#include "itkBMPDataImageReader.h"
#include "itkJPEGDataImageReader.h"
#include "itkTIFFDataImageReader.h"
#include "itkNiftiDataImageReader.h"
#include "itkNrrdDataImageReader.h"
#include "itkGiplDataImageReader.h"
#include "itkVTKDataImageReader.h"

#include "itkDataImageReaderPlugin.h"
#include "itkLogForwarder.h"

#include <dtkCore/dtkLog.h>


// /////////////////////////////////////////////////////////////////
// itkDataImageReaderPluginPrivate
// /////////////////////////////////////////////////////////////////

class itkDataImageReaderPluginPrivate 
{
public:
    itkDataImageReaderPluginPrivate()
    {
       forwarder = itk::LogForwarder::New();
    }
    ~itkDataImageReaderPluginPrivate()
    {

    }
    // Class variables go here.
    itk::LogForwarder::Pointer forwarder;
};

// /////////////////////////////////////////////////////////////////
// itkDataImageReaderPlugin
// /////////////////////////////////////////////////////////////////

itkDataImageReaderPlugin::itkDataImageReaderPlugin(QObject *parent) : dtkPlugin(parent), d(new itkDataImageReaderPluginPrivate)
{

}

itkDataImageReaderPlugin::~itkDataImageReaderPlugin(void)
{
    delete d;
    d = NULL;
}

bool itkDataImageReaderPlugin::initialize(void)
{
    if(!itkMetaDataImageReader::registered())     dtkWarning() << "Unable to register itkMetaDataImageReader type";
#ifdef ITK_USE_SYSTEM_GDCM
    if(!itkGDCMDataImageReader::registered())     dtkWarning() << "Unable to register  itkGDCMDataImageReader type";
#endif
    if(!itkNiftiDataImageReader::registered())    dtkWarning() << "Unable to register itkNiftiDataImageReader type";
    if(!itkAnalyzeDataImageReader::registered())  dtkWarning() << "Unable to register itkAnalyzeDataImageReader type";
    if(!itkNrrdDataImageReader::registered())     dtkWarning() << "Unable to register itkNrrdDataImageReader type";
    if(!itkGiplDataImageReader::registered())     dtkWarning() << "Unable to register itkGiplDataImageReader type";
    if(!itkVTKDataImageReader::registered())      dtkWarning() << "Unable to register itkVTKDataImageReader type";
    if(!itkPNGDataImageReader::registered())      dtkWarning() << "Unable to register itkPNGDataImageReader type";
    if(!itkBMPDataImageReader::registered())      dtkWarning() << "Unable to register itkBMPDataImageReader type";
    if(!itkJPEGDataImageReader::registered())     dtkWarning() << "Unable to register itkJPEGDataImageReader type";
    if(!itkTIFFDataImageReader::registered())     dtkWarning() << "Unable to register itkTIFFDataImageReader type";

    return true;
}

bool itkDataImageReaderPlugin::uninitialize(void)
{
    return true;
}

QString itkDataImageReaderPlugin::name(void) const
{
    return "itkDataImageReaderPlugin";
}

QString itkDataImageReaderPlugin::description(void) const
{
    return "Readers for any ITK image data type.";
}

QStringList itkDataImageReaderPlugin::tags(void) const
{
    return QStringList() << "itk" << "data" << "image" << "reader";
}

QStringList itkDataImageReaderPlugin::types(void) const
{
    return QStringList() << "itkMetaDataImageReader"
#ifdef ITK_USE_SYSTEM_GDCM    
            << "itkGDCMDataImageReader"
#endif    
            << "itkNiftiDataImageReader"
            << "itkAnalyzeDataImageReader"
            << "itkNrrdDataImageReader"
            << "itkGiplDataImageReader"
            << "itkVTKDataImageReader"
            << "itkPNGDataImageReader"
            << "itkBMPDataImageReader"
            << "itkJPEGDataImageReader"
            << "itkTIFFDataImageReader";
}

Q_EXPORT_PLUGIN2(itkDataImageReaderPlugin, itkDataImageReaderPlugin)
