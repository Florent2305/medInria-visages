// /////////////////////////////////////////////////////////////////
// Generated by dtkPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "vistalProcessGraphCutSeg.h"
#include "vistalProcessGraphCutSegPlugin.h"

#include <dtkCore/dtkPlugin_p.h>

#include <dtkLog/dtkLog.h>

// /////////////////////////////////////////////////////////////////
// vistalProcessGraphCutSegPluginPrivate interface
// /////////////////////////////////////////////////////////////////

class vistalProcessGraphCutSegPluginPrivate : public dtkPluginPrivate
{
public:
    vistalProcessGraphCutSegPluginPrivate(vistalProcessGraphCutSegPlugin *q = 0) : dtkPluginPrivate(q) {}
    vistalProcessGraphCutSegPluginPrivate(const vistalProcessGraphCutSegPluginPrivate& other) : dtkPluginPrivate(other) {} // Complete copy ctror with your local members.

public:
    ~vistalProcessGraphCutSegPluginPrivate(void) {}
    
public:
    // Class variables go here.
};

////////////////////////////////////////////////////
// vistalProcessGraphCutSegPlugin protected constructors
////////////////////////////////////////////////////

DTK_IMPLEMENT_PRIVATE(vistalProcessGraphCutSegPlugin, dtkPlugin);

// /////////////////////////////////////////////////////////////////
// vistalProcessGraphCutSegPlugin implementation
// /////////////////////////////////////////////////////////////////

vistalProcessGraphCutSegPlugin::vistalProcessGraphCutSegPlugin(QObject *parent) : dtkPlugin(*new vistalProcessGraphCutSegPluginPrivate, parent)
{

}

vistalProcessGraphCutSegPlugin::vistalProcessGraphCutSegPlugin(const vistalProcessGraphCutSegPlugin& other) : dtkPlugin(*new vistalProcessGraphCutSegPluginPrivate(*other.d_func()), other)
{
    
}

vistalProcessGraphCutSegPlugin::~vistalProcessGraphCutSegPlugin(void)
{

}

bool vistalProcessGraphCutSegPlugin::initialize(void)
{
    bool ret = vistalProcessGraphCutSeg::registered();

    if(!ret) dtkWarn() << "Unable to register vistalProcessGraphCutSeg type";

    ret &= vistalProcessGraphCutSegToolBox::registered();

    if(!ret) dtkWarn() << "Unable to register vistalProcessGraphCutSegToolBox type";

    return ret;
}

bool vistalProcessGraphCutSegPlugin::uninitialize(void)
{
    return true;
}

QString vistalProcessGraphCutSegPlugin::name(void) const
{
    return "vistalProcessGraphCutSegPlugin";
}

QString vistalProcessGraphCutSegPlugin::description(void) const
{
    return "This plugin implements a graph cut based segmentation";
}

QStringList vistalProcessGraphCutSegPlugin::tags(void) const
{
    return QStringList() << "vistal" << "graphcut" << "segmentation";
}

QStringList vistalProcessGraphCutSegPlugin::types(void) const
{
    return QStringList() << "vistalProcessGraphCutSeg";
}

Q_EXPORT_PLUGIN2(vistalProcessGraphCutSegPlugin, vistalProcessGraphCutSegPlugin)
